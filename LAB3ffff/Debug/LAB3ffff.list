
LAB3ffff.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e18  08002e18  00012e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e3c  08002e3c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08002e3c  08002e3c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e3c  08002e3c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e3c  08002e3c  00012e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e40  08002e40  00012e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08002e44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000020  08002e64  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08002e64  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7cc  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d62  00000000  00000000  0002a815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002c578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  0002cff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ff8  00000000  00000000  0002d9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1df  00000000  00000000  00044998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082624  00000000  00000000  00050b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d319b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002934  00000000  00000000  000d31f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e00 	.word	0x08002e00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08002e00 	.word	0x08002e00

0800014c <fsm_automatic_run>:
int b;
int y ;
int z ;
int c;
int x;
void fsm_automatic_run(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(timer2_flag == 1){
 8000150:	4b8d      	ldr	r3, [pc, #564]	; (8000388 <fsm_automatic_run+0x23c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d113      	bne.n	8000180 <fsm_automatic_run+0x34>
		c++;
 8000158:	4b8c      	ldr	r3, [pc, #560]	; (800038c <fsm_automatic_run+0x240>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	3301      	adds	r3, #1
 800015e:	4a8b      	ldr	r2, [pc, #556]	; (800038c <fsm_automatic_run+0x240>)
 8000160:	6013      	str	r3, [r2, #0]
		setTimer2(15);
 8000162:	200f      	movs	r0, #15
 8000164:	f001 f876 	bl	8001254 <setTimer2>
		if ( c > 3){c = 0;}
 8000168:	4b88      	ldr	r3, [pc, #544]	; (800038c <fsm_automatic_run+0x240>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	2b03      	cmp	r3, #3
 800016e:	dd02      	ble.n	8000176 <fsm_automatic_run+0x2a>
 8000170:	4b86      	ldr	r3, [pc, #536]	; (800038c <fsm_automatic_run+0x240>)
 8000172:	2200      	movs	r2, #0
 8000174:	601a      	str	r2, [r3, #0]
		update7SEG(c);
 8000176:	4b85      	ldr	r3, [pc, #532]	; (800038c <fsm_automatic_run+0x240>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4618      	mov	r0, r3
 800017c:	f000 fe8c 	bl	8000e98 <update7SEG>
	}
	switch (status){
 8000180:	4b83      	ldr	r3, [pc, #524]	; (8000390 <fsm_automatic_run+0x244>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	3b01      	subs	r3, #1
 8000186:	2b08      	cmp	r3, #8
 8000188:	f200 80f3 	bhi.w	8000372 <fsm_automatic_run+0x226>
 800018c:	a201      	add	r2, pc, #4	; (adr r2, 8000194 <fsm_automatic_run+0x48>)
 800018e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000192:	bf00      	nop
 8000194:	080001b9 	.word	0x080001b9
 8000198:	08000223 	.word	0x08000223
 800019c:	08000277 	.word	0x08000277
 80001a0:	080002c9 	.word	0x080002c9
 80001a4:	0800031f 	.word	0x0800031f
 80001a8:	08000373 	.word	0x08000373
 80001ac:	08000373 	.word	0x08000373
 80001b0:	08000373 	.word	0x08000373
 80001b4:	080001db 	.word	0x080001db
	case INIT:
		y = 3;
 80001b8:	4b76      	ldr	r3, [pc, #472]	; (8000394 <fsm_automatic_run+0x248>)
 80001ba:	2203      	movs	r2, #3
 80001bc:	601a      	str	r2, [r3, #0]
		z = 2;
 80001be:	4b76      	ldr	r3, [pc, #472]	; (8000398 <fsm_automatic_run+0x24c>)
 80001c0:	2202      	movs	r2, #2
 80001c2:	601a      	str	r2, [r3, #0]
		x = y+z;
 80001c4:	4b73      	ldr	r3, [pc, #460]	; (8000394 <fsm_automatic_run+0x248>)
 80001c6:	681a      	ldr	r2, [r3, #0]
 80001c8:	4b73      	ldr	r3, [pc, #460]	; (8000398 <fsm_automatic_run+0x24c>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4413      	add	r3, r2
 80001ce:	4a73      	ldr	r2, [pc, #460]	; (800039c <fsm_automatic_run+0x250>)
 80001d0:	6013      	str	r3, [r2, #0]
		status = MODE1;
 80001d2:	4b6f      	ldr	r3, [pc, #444]	; (8000390 <fsm_automatic_run+0x244>)
 80001d4:	2209      	movs	r2, #9
 80001d6:	601a      	str	r2, [r3, #0]
        break;
 80001d8:	e0d4      	b.n	8000384 <fsm_automatic_run+0x238>
	case MODE1:
		SCAN1(1);
 80001da:	2001      	movs	r0, #1
 80001dc:	f000 fbd4 	bl	8000988 <SCAN1>
		traffic_light(status);
 80001e0:	4b6b      	ldr	r3, [pc, #428]	; (8000390 <fsm_automatic_run+0x244>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4618      	mov	r0, r3
 80001e6:	f001 f97d 	bl	80014e4 <traffic_light>
		status = RED1_GREEN ;
 80001ea:	4b69      	ldr	r3, [pc, #420]	; (8000390 <fsm_automatic_run+0x244>)
 80001ec:	2202      	movs	r2, #2
 80001ee:	601a      	str	r2, [r3, #0]
        setTimer1(y*100);
 80001f0:	4b68      	ldr	r3, [pc, #416]	; (8000394 <fsm_automatic_run+0x248>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	2264      	movs	r2, #100	; 0x64
 80001f6:	fb02 f303 	mul.w	r3, r2, r3
 80001fa:	4618      	mov	r0, r3
 80001fc:	f001 f816 	bl	800122c <setTimer1>
        setTimer2(1);
 8000200:	2001      	movs	r0, #1
 8000202:	f001 f827 	bl	8001254 <setTimer2>
        timer3_flag = 1;
 8000206:	4b66      	ldr	r3, [pc, #408]	; (80003a0 <fsm_automatic_run+0x254>)
 8000208:	2201      	movs	r2, #1
 800020a:	601a      	str	r2, [r3, #0]
        if(isButtonPressed(0)== 1){
 800020c:	2000      	movs	r0, #0
 800020e:	f000 fabf 	bl	8000790 <isButtonPressed>
 8000212:	4603      	mov	r3, r0
 8000214:	2b01      	cmp	r3, #1
 8000216:	f040 80ae 	bne.w	8000376 <fsm_automatic_run+0x22a>
        	status = MODE2;
 800021a:	4b5d      	ldr	r3, [pc, #372]	; (8000390 <fsm_automatic_run+0x244>)
 800021c:	220a      	movs	r2, #10
 800021e:	601a      	str	r2, [r3, #0]
        }

        break;
 8000220:	e0a9      	b.n	8000376 <fsm_automatic_run+0x22a>
	case RED1_GREEN :
		SCAN1(1);
 8000222:	2001      	movs	r0, #1
 8000224:	f000 fbb0 	bl	8000988 <SCAN1>
		SEVled_run(x,y);
 8000228:	4b5c      	ldr	r3, [pc, #368]	; (800039c <fsm_automatic_run+0x250>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a59      	ldr	r2, [pc, #356]	; (8000394 <fsm_automatic_run+0x248>)
 800022e:	6812      	ldr	r2, [r2, #0]
 8000230:	4611      	mov	r1, r2
 8000232:	4618      	mov	r0, r3
 8000234:	f000 feaa 	bl	8000f8c <SEVled_run>
		traffic_light(status);
 8000238:	4b55      	ldr	r3, [pc, #340]	; (8000390 <fsm_automatic_run+0x244>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4618      	mov	r0, r3
 800023e:	f001 f951 	bl	80014e4 <traffic_light>
		if (timer1_flag == 1){
 8000242:	4b58      	ldr	r3, [pc, #352]	; (80003a4 <fsm_automatic_run+0x258>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	2b01      	cmp	r3, #1
 8000248:	d10a      	bne.n	8000260 <fsm_automatic_run+0x114>
			status = RED1_YELLOW;
 800024a:	4b51      	ldr	r3, [pc, #324]	; (8000390 <fsm_automatic_run+0x244>)
 800024c:	2203      	movs	r2, #3
 800024e:	601a      	str	r2, [r3, #0]
			setTimer1(z*100);
 8000250:	4b51      	ldr	r3, [pc, #324]	; (8000398 <fsm_automatic_run+0x24c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2264      	movs	r2, #100	; 0x64
 8000256:	fb02 f303 	mul.w	r3, r2, r3
 800025a:	4618      	mov	r0, r3
 800025c:	f000 ffe6 	bl	800122c <setTimer1>
		}
        if(isButtonPressed(0)== 1){
 8000260:	2000      	movs	r0, #0
 8000262:	f000 fa95 	bl	8000790 <isButtonPressed>
 8000266:	4603      	mov	r3, r0
 8000268:	2b01      	cmp	r3, #1
 800026a:	f040 8086 	bne.w	800037a <fsm_automatic_run+0x22e>
        	status = MODE2;
 800026e:	4b48      	ldr	r3, [pc, #288]	; (8000390 <fsm_automatic_run+0x244>)
 8000270:	220a      	movs	r2, #10
 8000272:	601a      	str	r2, [r3, #0]
        }
		break;
 8000274:	e081      	b.n	800037a <fsm_automatic_run+0x22e>
	case RED1_YELLOW:
		SCAN1(1);
 8000276:	2001      	movs	r0, #1
 8000278:	f000 fb86 	bl	8000988 <SCAN1>
		SEVled_run(x,z);
 800027c:	4b47      	ldr	r3, [pc, #284]	; (800039c <fsm_automatic_run+0x250>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a45      	ldr	r2, [pc, #276]	; (8000398 <fsm_automatic_run+0x24c>)
 8000282:	6812      	ldr	r2, [r2, #0]
 8000284:	4611      	mov	r1, r2
 8000286:	4618      	mov	r0, r3
 8000288:	f000 fe80 	bl	8000f8c <SEVled_run>
		traffic_light(status);
 800028c:	4b40      	ldr	r3, [pc, #256]	; (8000390 <fsm_automatic_run+0x244>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4618      	mov	r0, r3
 8000292:	f001 f927 	bl	80014e4 <traffic_light>
		if (timer1_flag == 1){
 8000296:	4b43      	ldr	r3, [pc, #268]	; (80003a4 <fsm_automatic_run+0x258>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b01      	cmp	r3, #1
 800029c:	d10a      	bne.n	80002b4 <fsm_automatic_run+0x168>
			status = GREEN1_RED;
 800029e:	4b3c      	ldr	r3, [pc, #240]	; (8000390 <fsm_automatic_run+0x244>)
 80002a0:	2204      	movs	r2, #4
 80002a2:	601a      	str	r2, [r3, #0]
			setTimer1(y*100);
 80002a4:	4b3b      	ldr	r3, [pc, #236]	; (8000394 <fsm_automatic_run+0x248>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2264      	movs	r2, #100	; 0x64
 80002aa:	fb02 f303 	mul.w	r3, r2, r3
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 ffbc 	bl	800122c <setTimer1>
		}
        if(isButtonPressed(0)== 1){
 80002b4:	2000      	movs	r0, #0
 80002b6:	f000 fa6b 	bl	8000790 <isButtonPressed>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d15e      	bne.n	800037e <fsm_automatic_run+0x232>
        	status = MODE2;
 80002c0:	4b33      	ldr	r3, [pc, #204]	; (8000390 <fsm_automatic_run+0x244>)
 80002c2:	220a      	movs	r2, #10
 80002c4:	601a      	str	r2, [r3, #0]
        }


		break;
 80002c6:	e05a      	b.n	800037e <fsm_automatic_run+0x232>

	case GREEN1_RED:
		SCAN1(1);
 80002c8:	2001      	movs	r0, #1
 80002ca:	f000 fb5d 	bl	8000988 <SCAN1>
		SEVled_run(y,y+z);
 80002ce:	4b31      	ldr	r3, [pc, #196]	; (8000394 <fsm_automatic_run+0x248>)
 80002d0:	6818      	ldr	r0, [r3, #0]
 80002d2:	4b30      	ldr	r3, [pc, #192]	; (8000394 <fsm_automatic_run+0x248>)
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	4b30      	ldr	r3, [pc, #192]	; (8000398 <fsm_automatic_run+0x24c>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4413      	add	r3, r2
 80002dc:	4619      	mov	r1, r3
 80002de:	f000 fe55 	bl	8000f8c <SEVled_run>
		traffic_light(status);
 80002e2:	4b2b      	ldr	r3, [pc, #172]	; (8000390 <fsm_automatic_run+0x244>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 f8fc 	bl	80014e4 <traffic_light>
		if (timer1_flag == 1){
 80002ec:	4b2d      	ldr	r3, [pc, #180]	; (80003a4 <fsm_automatic_run+0x258>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d10a      	bne.n	800030a <fsm_automatic_run+0x1be>
			status = YELLOW1_RED;
 80002f4:	4b26      	ldr	r3, [pc, #152]	; (8000390 <fsm_automatic_run+0x244>)
 80002f6:	2205      	movs	r2, #5
 80002f8:	601a      	str	r2, [r3, #0]
			setTimer1(z*100);
 80002fa:	4b27      	ldr	r3, [pc, #156]	; (8000398 <fsm_automatic_run+0x24c>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2264      	movs	r2, #100	; 0x64
 8000300:	fb02 f303 	mul.w	r3, r2, r3
 8000304:	4618      	mov	r0, r3
 8000306:	f000 ff91 	bl	800122c <setTimer1>
		}
        if(isButtonPressed(0)== 1){
 800030a:	2000      	movs	r0, #0
 800030c:	f000 fa40 	bl	8000790 <isButtonPressed>
 8000310:	4603      	mov	r3, r0
 8000312:	2b01      	cmp	r3, #1
 8000314:	d135      	bne.n	8000382 <fsm_automatic_run+0x236>
        	status = MODE2;
 8000316:	4b1e      	ldr	r3, [pc, #120]	; (8000390 <fsm_automatic_run+0x244>)
 8000318:	220a      	movs	r2, #10
 800031a:	601a      	str	r2, [r3, #0]
        }

		break;
 800031c:	e031      	b.n	8000382 <fsm_automatic_run+0x236>

	case YELLOW1_RED:
		SCAN1(1);
 800031e:	2001      	movs	r0, #1
 8000320:	f000 fb32 	bl	8000988 <SCAN1>
		SEVled_run(z,y+z);
 8000324:	4b1c      	ldr	r3, [pc, #112]	; (8000398 <fsm_automatic_run+0x24c>)
 8000326:	6818      	ldr	r0, [r3, #0]
 8000328:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <fsm_automatic_run+0x248>)
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <fsm_automatic_run+0x24c>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4413      	add	r3, r2
 8000332:	4619      	mov	r1, r3
 8000334:	f000 fe2a 	bl	8000f8c <SEVled_run>
		traffic_light(status);
 8000338:	4b15      	ldr	r3, [pc, #84]	; (8000390 <fsm_automatic_run+0x244>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4618      	mov	r0, r3
 800033e:	f001 f8d1 	bl	80014e4 <traffic_light>
		if (timer1_flag == 1){
 8000342:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <fsm_automatic_run+0x258>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d10a      	bne.n	8000360 <fsm_automatic_run+0x214>

			status = RED1_GREEN;
 800034a:	4b11      	ldr	r3, [pc, #68]	; (8000390 <fsm_automatic_run+0x244>)
 800034c:	2202      	movs	r2, #2
 800034e:	601a      	str	r2, [r3, #0]
			setTimer1(y*100);
 8000350:	4b10      	ldr	r3, [pc, #64]	; (8000394 <fsm_automatic_run+0x248>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2264      	movs	r2, #100	; 0x64
 8000356:	fb02 f303 	mul.w	r3, r2, r3
 800035a:	4618      	mov	r0, r3
 800035c:	f000 ff66 	bl	800122c <setTimer1>
		}
        if(isButtonPressed(0)== 1){
 8000360:	2000      	movs	r0, #0
 8000362:	f000 fa15 	bl	8000790 <isButtonPressed>
 8000366:	4603      	mov	r3, r0
 8000368:	2b01      	cmp	r3, #1
 800036a:	d102      	bne.n	8000372 <fsm_automatic_run+0x226>
        	status = MODE2;
 800036c:	4b08      	ldr	r3, [pc, #32]	; (8000390 <fsm_automatic_run+0x244>)
 800036e:	220a      	movs	r2, #10
 8000370:	601a      	str	r2, [r3, #0]
        }

	default:
		break;
 8000372:	bf00      	nop
 8000374:	e006      	b.n	8000384 <fsm_automatic_run+0x238>
        break;
 8000376:	bf00      	nop
 8000378:	e004      	b.n	8000384 <fsm_automatic_run+0x238>
		break;
 800037a:	bf00      	nop
 800037c:	e002      	b.n	8000384 <fsm_automatic_run+0x238>
		break;
 800037e:	bf00      	nop
 8000380:	e000      	b.n	8000384 <fsm_automatic_run+0x238>
		break;
 8000382:	bf00      	nop
		}
	}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000048 	.word	0x20000048
 800038c:	2000009c 	.word	0x2000009c
 8000390:	2000003c 	.word	0x2000003c
 8000394:	200000a8 	.word	0x200000a8
 8000398:	20000098 	.word	0x20000098
 800039c:	20000078 	.word	0x20000078
 80003a0:	20000050 	.word	0x20000050
 80003a4:	20000040 	.word	0x20000040

080003a8 <fsm_manual_run>:
 *      Author: Acer
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0

	switch (status){
 80003ac:	4ba5      	ldr	r3, [pc, #660]	; (8000644 <fsm_manual_run+0x29c>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	3b06      	subs	r3, #6
 80003b2:	2b09      	cmp	r3, #9
 80003b4:	f200 8186 	bhi.w	80006c4 <fsm_manual_run+0x31c>
 80003b8:	a201      	add	r2, pc, #4	; (adr r2, 80003c0 <fsm_manual_run+0x18>)
 80003ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003be:	bf00      	nop
 80003c0:	080003f7 	.word	0x080003f7
 80003c4:	080004e7 	.word	0x080004e7
 80003c8:	080005e1 	.word	0x080005e1
 80003cc:	080006c5 	.word	0x080006c5
 80003d0:	080003e9 	.word	0x080003e9
 80003d4:	080004d9 	.word	0x080004d9
 80003d8:	080005cd 	.word	0x080005cd
 80003dc:	08000453 	.word	0x08000453
 80003e0:	08000543 	.word	0x08000543
 80003e4:	08000659 	.word	0x08000659
	case MODE2:
    status = RED;
 80003e8:	4b96      	ldr	r3, [pc, #600]	; (8000644 <fsm_manual_run+0x29c>)
 80003ea:	2206      	movs	r2, #6
 80003ec:	601a      	str	r2, [r3, #0]
    SCAN1(2);
 80003ee:	2002      	movs	r0, #2
 80003f0:	f000 faca 	bl	8000988 <SCAN1>

    break;
 80003f4:	e173      	b.n	80006de <fsm_manual_run+0x336>
	case RED:
		SCAN1(2);
 80003f6:	2002      	movs	r0, #2
 80003f8:	f000 fac6 	bl	8000988 <SCAN1>
		if(timer4_flag == 1){
 80003fc:	4b92      	ldr	r3, [pc, #584]	; (8000648 <fsm_manual_run+0x2a0>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d103      	bne.n	800040c <fsm_manual_run+0x64>
     setTimer4(500);
 8000404:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000408:	f000 ff4c 	bl	80012a4 <setTimer4>
		}
     if(isButtonPressed(0) == 1){
 800040c:	2000      	movs	r0, #0
 800040e:	f000 f9bf 	bl	8000790 <isButtonPressed>
 8000412:	4603      	mov	r3, r0
 8000414:	2b01      	cmp	r3, #1
 8000416:	d102      	bne.n	800041e <fsm_manual_run+0x76>
         	status = MODE3;
 8000418:	4b8a      	ldr	r3, [pc, #552]	; (8000644 <fsm_manual_run+0x29c>)
 800041a:	220b      	movs	r2, #11
 800041c:	601a      	str	r2, [r3, #0]
	}
     if(isButtonPressed(1) == 1){
 800041e:	2001      	movs	r0, #1
 8000420:	f000 f9b6 	bl	8000790 <isButtonPressed>
 8000424:	4603      	mov	r3, r0
 8000426:	2b01      	cmp	r3, #1
 8000428:	f040 814e 	bne.w	80006c8 <fsm_manual_run+0x320>
    	 status = ADJ_RED;
 800042c:	4b85      	ldr	r3, [pc, #532]	; (8000644 <fsm_manual_run+0x29c>)
 800042e:	220d      	movs	r2, #13
 8000430:	601a      	str	r2, [r3, #0]
    	 if(x>=99){x=z+1;}
 8000432:	4b86      	ldr	r3, [pc, #536]	; (800064c <fsm_manual_run+0x2a4>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b62      	cmp	r3, #98	; 0x62
 8000438:	dd05      	ble.n	8000446 <fsm_manual_run+0x9e>
 800043a:	4b85      	ldr	r3, [pc, #532]	; (8000650 <fsm_manual_run+0x2a8>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	3301      	adds	r3, #1
 8000440:	4a82      	ldr	r2, [pc, #520]	; (800064c <fsm_manual_run+0x2a4>)
 8000442:	6013      	str	r3, [r2, #0]
    	 else{
    		 x++;
    	 }
     }

     break;
 8000444:	e140      	b.n	80006c8 <fsm_manual_run+0x320>
    		 x++;
 8000446:	4b81      	ldr	r3, [pc, #516]	; (800064c <fsm_manual_run+0x2a4>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	3301      	adds	r3, #1
 800044c:	4a7f      	ldr	r2, [pc, #508]	; (800064c <fsm_manual_run+0x2a4>)
 800044e:	6013      	str	r3, [r2, #0]
     break;
 8000450:	e13a      	b.n	80006c8 <fsm_manual_run+0x320>
    case ADJ_RED:
    	SCAN1(2);
 8000452:	2002      	movs	r0, #2
 8000454:	f000 fa98 	bl	8000988 <SCAN1>
    	traffic_light(RED);
 8000458:	2006      	movs	r0, #6
 800045a:	f001 f843 	bl	80014e4 <traffic_light>
		if(timer4_flag == 1){
 800045e:	4b7a      	ldr	r3, [pc, #488]	; (8000648 <fsm_manual_run+0x2a0>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2b01      	cmp	r3, #1
 8000464:	d102      	bne.n	800046c <fsm_manual_run+0xc4>
          setTimer4(50);}
 8000466:	2032      	movs	r0, #50	; 0x32
 8000468:	f000 ff1c 	bl	80012a4 <setTimer4>

		if (isButtonPressed(1) == 1) {
 800046c:	2001      	movs	r0, #1
 800046e:	f000 f98f 	bl	8000790 <isButtonPressed>
 8000472:	4603      	mov	r3, r0
 8000474:	2b01      	cmp	r3, #1
 8000476:	d11c      	bne.n	80004b2 <fsm_manual_run+0x10a>
			if (x >= 99) x = z + 1;
 8000478:	4b74      	ldr	r3, [pc, #464]	; (800064c <fsm_manual_run+0x2a4>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b62      	cmp	r3, #98	; 0x62
 800047e:	dd05      	ble.n	800048c <fsm_manual_run+0xe4>
 8000480:	4b73      	ldr	r3, [pc, #460]	; (8000650 <fsm_manual_run+0x2a8>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	3301      	adds	r3, #1
 8000486:	4a71      	ldr	r2, [pc, #452]	; (800064c <fsm_manual_run+0x2a4>)
 8000488:	6013      	str	r3, [r2, #0]
 800048a:	e004      	b.n	8000496 <fsm_manual_run+0xee>
			else x++ ;
 800048c:	4b6f      	ldr	r3, [pc, #444]	; (800064c <fsm_manual_run+0x2a4>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	3301      	adds	r3, #1
 8000492:	4a6e      	ldr	r2, [pc, #440]	; (800064c <fsm_manual_run+0x2a4>)
 8000494:	6013      	str	r3, [r2, #0]
			y = x - z;
 8000496:	4b6d      	ldr	r3, [pc, #436]	; (800064c <fsm_manual_run+0x2a4>)
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	4b6d      	ldr	r3, [pc, #436]	; (8000650 <fsm_manual_run+0x2a8>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	1ad3      	subs	r3, r2, r3
 80004a0:	4a6c      	ldr	r2, [pc, #432]	; (8000654 <fsm_manual_run+0x2ac>)
 80004a2:	6013      	str	r3, [r2, #0]
			z = x - y;
 80004a4:	4b69      	ldr	r3, [pc, #420]	; (800064c <fsm_manual_run+0x2a4>)
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	4b6a      	ldr	r3, [pc, #424]	; (8000654 <fsm_manual_run+0x2ac>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	1ad3      	subs	r3, r2, r3
 80004ae:	4a68      	ldr	r2, [pc, #416]	; (8000650 <fsm_manual_run+0x2a8>)
 80004b0:	6013      	str	r3, [r2, #0]
		}
		updateClockBuffer(x,x);
 80004b2:	4b66      	ldr	r3, [pc, #408]	; (800064c <fsm_manual_run+0x2a4>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a65      	ldr	r2, [pc, #404]	; (800064c <fsm_manual_run+0x2a4>)
 80004b8:	6812      	ldr	r2, [r2, #0]
 80004ba:	4611      	mov	r1, r2
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 fa0f 	bl	80008e0 <updateClockBuffer>
		if (isButtonPressed(2) == 1) {
 80004c2:	2002      	movs	r0, #2
 80004c4:	f000 f964 	bl	8000790 <isButtonPressed>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	f040 80fe 	bne.w	80006cc <fsm_manual_run+0x324>
			status = MODE1;
 80004d0:	4b5c      	ldr	r3, [pc, #368]	; (8000644 <fsm_manual_run+0x29c>)
 80004d2:	2209      	movs	r2, #9
 80004d4:	601a      	str	r2, [r3, #0]

		}
		break;
 80004d6:	e0f9      	b.n	80006cc <fsm_manual_run+0x324>
    case MODE3:
        status = GREEN;
 80004d8:	4b5a      	ldr	r3, [pc, #360]	; (8000644 <fsm_manual_run+0x29c>)
 80004da:	2207      	movs	r2, #7
 80004dc:	601a      	str	r2, [r3, #0]
        SCAN1(3);
 80004de:	2003      	movs	r0, #3
 80004e0:	f000 fa52 	bl	8000988 <SCAN1>

        break;
 80004e4:	e0fb      	b.n	80006de <fsm_manual_run+0x336>
    case GREEN:
    	 SCAN1(3);
 80004e6:	2003      	movs	r0, #3
 80004e8:	f000 fa4e 	bl	8000988 <SCAN1>
    	 traffic_light(GREEN);
 80004ec:	2007      	movs	r0, #7
 80004ee:	f000 fff9 	bl	80014e4 <traffic_light>
         if(timer4_flag == 1){
 80004f2:	4b55      	ldr	r3, [pc, #340]	; (8000648 <fsm_manual_run+0x2a0>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d102      	bne.n	8000500 <fsm_manual_run+0x158>
         setTimer4(50);}
 80004fa:	2032      	movs	r0, #50	; 0x32
 80004fc:	f000 fed2 	bl	80012a4 <setTimer4>
    	 if(isButtonPressed(0) == 1){
 8000500:	2000      	movs	r0, #0
 8000502:	f000 f945 	bl	8000790 <isButtonPressed>
 8000506:	4603      	mov	r3, r0
 8000508:	2b01      	cmp	r3, #1
 800050a:	d102      	bne.n	8000512 <fsm_manual_run+0x16a>
    		 status = MODE4;
 800050c:	4b4d      	ldr	r3, [pc, #308]	; (8000644 <fsm_manual_run+0x29c>)
 800050e:	220c      	movs	r2, #12
 8000510:	601a      	str	r2, [r3, #0]
    	 }
    	 if(isButtonPressed(1)==1){
 8000512:	2001      	movs	r0, #1
 8000514:	f000 f93c 	bl	8000790 <isButtonPressed>
 8000518:	4603      	mov	r3, r0
 800051a:	2b01      	cmp	r3, #1
 800051c:	f040 80d8 	bne.w	80006d0 <fsm_manual_run+0x328>
    		 status = ADJ_GREEN;
 8000520:	4b48      	ldr	r3, [pc, #288]	; (8000644 <fsm_manual_run+0x29c>)
 8000522:	220e      	movs	r2, #14
 8000524:	601a      	str	r2, [r3, #0]
    		 if(y >= 99 ){y=1;}
 8000526:	4b4b      	ldr	r3, [pc, #300]	; (8000654 <fsm_manual_run+0x2ac>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b62      	cmp	r3, #98	; 0x62
 800052c:	dd03      	ble.n	8000536 <fsm_manual_run+0x18e>
 800052e:	4b49      	ldr	r3, [pc, #292]	; (8000654 <fsm_manual_run+0x2ac>)
 8000530:	2201      	movs	r2, #1
 8000532:	601a      	str	r2, [r3, #0]
    		 else y++;
    	 }
    	 break;
 8000534:	e0cc      	b.n	80006d0 <fsm_manual_run+0x328>
    		 else y++;
 8000536:	4b47      	ldr	r3, [pc, #284]	; (8000654 <fsm_manual_run+0x2ac>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	3301      	adds	r3, #1
 800053c:	4a45      	ldr	r2, [pc, #276]	; (8000654 <fsm_manual_run+0x2ac>)
 800053e:	6013      	str	r3, [r2, #0]
    	 break;
 8000540:	e0c6      	b.n	80006d0 <fsm_manual_run+0x328>
    case ADJ_GREEN:
    	 SCAN1(3);
 8000542:	2003      	movs	r0, #3
 8000544:	f000 fa20 	bl	8000988 <SCAN1>
    	 traffic_light(GREEN);
 8000548:	2007      	movs	r0, #7
 800054a:	f000 ffcb 	bl	80014e4 <traffic_light>
    	if(timer4_flag == 1){
 800054e:	4b3e      	ldr	r3, [pc, #248]	; (8000648 <fsm_manual_run+0x2a0>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b01      	cmp	r3, #1
 8000554:	d102      	bne.n	800055c <fsm_manual_run+0x1b4>
    		 setTimer4(50);
 8000556:	2032      	movs	r0, #50	; 0x32
 8000558:	f000 fea4 	bl	80012a4 <setTimer4>
    	}
    	if(isButtonPressed(1) == 1){
 800055c:	2001      	movs	r0, #1
 800055e:	f000 f917 	bl	8000790 <isButtonPressed>
 8000562:	4603      	mov	r3, r0
 8000564:	2b01      	cmp	r3, #1
 8000566:	d110      	bne.n	800058a <fsm_manual_run+0x1e2>
    		if(y >= 99-z ){y=1;}
 8000568:	4b39      	ldr	r3, [pc, #228]	; (8000650 <fsm_manual_run+0x2a8>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f1c3 0263 	rsb	r2, r3, #99	; 0x63
 8000570:	4b38      	ldr	r3, [pc, #224]	; (8000654 <fsm_manual_run+0x2ac>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	429a      	cmp	r2, r3
 8000576:	dc03      	bgt.n	8000580 <fsm_manual_run+0x1d8>
 8000578:	4b36      	ldr	r3, [pc, #216]	; (8000654 <fsm_manual_run+0x2ac>)
 800057a:	2201      	movs	r2, #1
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	e004      	b.n	800058a <fsm_manual_run+0x1e2>
    		 else y++;
 8000580:	4b34      	ldr	r3, [pc, #208]	; (8000654 <fsm_manual_run+0x2ac>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	4a33      	ldr	r2, [pc, #204]	; (8000654 <fsm_manual_run+0x2ac>)
 8000588:	6013      	str	r3, [r2, #0]
    	}
    	updateClockBuffer(y, y);
 800058a:	4b32      	ldr	r3, [pc, #200]	; (8000654 <fsm_manual_run+0x2ac>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a31      	ldr	r2, [pc, #196]	; (8000654 <fsm_manual_run+0x2ac>)
 8000590:	6812      	ldr	r2, [r2, #0]
 8000592:	4611      	mov	r1, r2
 8000594:	4618      	mov	r0, r3
 8000596:	f000 f9a3 	bl	80008e0 <updateClockBuffer>

    	if(isButtonPressed(2)==1){
 800059a:	2002      	movs	r0, #2
 800059c:	f000 f8f8 	bl	8000790 <isButtonPressed>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	f040 8096 	bne.w	80006d4 <fsm_manual_run+0x32c>
    		status = MODE1;
 80005a8:	4b26      	ldr	r3, [pc, #152]	; (8000644 <fsm_manual_run+0x29c>)
 80005aa:	2209      	movs	r2, #9
 80005ac:	601a      	str	r2, [r3, #0]
    		x = y + z;
 80005ae:	4b29      	ldr	r3, [pc, #164]	; (8000654 <fsm_manual_run+0x2ac>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	4b27      	ldr	r3, [pc, #156]	; (8000650 <fsm_manual_run+0x2a8>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a24      	ldr	r2, [pc, #144]	; (800064c <fsm_manual_run+0x2a4>)
 80005ba:	6013      	str	r3, [r2, #0]
    		z = x - y;
 80005bc:	4b23      	ldr	r3, [pc, #140]	; (800064c <fsm_manual_run+0x2a4>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <fsm_manual_run+0x2ac>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	4a22      	ldr	r2, [pc, #136]	; (8000650 <fsm_manual_run+0x2a8>)
 80005c8:	6013      	str	r3, [r2, #0]
    	}
    	break;
 80005ca:	e083      	b.n	80006d4 <fsm_manual_run+0x32c>

    case MODE4:
    	y = 3;
 80005cc:	4b21      	ldr	r3, [pc, #132]	; (8000654 <fsm_manual_run+0x2ac>)
 80005ce:	2203      	movs	r2, #3
 80005d0:	601a      	str	r2, [r3, #0]
    	status = YELLOW;
 80005d2:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <fsm_manual_run+0x29c>)
 80005d4:	2208      	movs	r2, #8
 80005d6:	601a      	str	r2, [r3, #0]
    	 SCAN1(4);
 80005d8:	2004      	movs	r0, #4
 80005da:	f000 f9d5 	bl	8000988 <SCAN1>
    	break;
 80005de:	e07e      	b.n	80006de <fsm_manual_run+0x336>

    case YELLOW:
    	 SCAN1(4);
 80005e0:	2004      	movs	r0, #4
 80005e2:	f000 f9d1 	bl	8000988 <SCAN1>
    	traffic_light(YELLOW);
 80005e6:	2008      	movs	r0, #8
 80005e8:	f000 ff7c 	bl	80014e4 <traffic_light>
    	if(timer4_flag == 1){
 80005ec:	4b16      	ldr	r3, [pc, #88]	; (8000648 <fsm_manual_run+0x2a0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d102      	bne.n	80005fa <fsm_manual_run+0x252>
    		setTimer4(50);
 80005f4:	2032      	movs	r0, #50	; 0x32
 80005f6:	f000 fe55 	bl	80012a4 <setTimer4>
    	}
    	if(isButtonPressed(0)==1){
 80005fa:	2000      	movs	r0, #0
 80005fc:	f000 f8c8 	bl	8000790 <isButtonPressed>
 8000600:	4603      	mov	r3, r0
 8000602:	2b01      	cmp	r3, #1
 8000604:	d102      	bne.n	800060c <fsm_manual_run+0x264>
    		status = MODE1;
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <fsm_manual_run+0x29c>)
 8000608:	2209      	movs	r2, #9
 800060a:	601a      	str	r2, [r3, #0]
    	}
    	if(isButtonPressed(1)== 1){
 800060c:	2001      	movs	r0, #1
 800060e:	f000 f8bf 	bl	8000790 <isButtonPressed>
 8000612:	4603      	mov	r3, r0
 8000614:	2b01      	cmp	r3, #1
 8000616:	d15f      	bne.n	80006d8 <fsm_manual_run+0x330>
    		status = ADJ_YELLOW;
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <fsm_manual_run+0x29c>)
 800061a:	220f      	movs	r2, #15
 800061c:	601a      	str	r2, [r3, #0]
    		if(z >= 99-y){z=1;}
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <fsm_manual_run+0x2ac>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f1c3 0263 	rsb	r2, r3, #99	; 0x63
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <fsm_manual_run+0x2a8>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	429a      	cmp	r2, r3
 800062c:	dc03      	bgt.n	8000636 <fsm_manual_run+0x28e>
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <fsm_manual_run+0x2a8>)
 8000630:	2201      	movs	r2, #1
 8000632:	601a      	str	r2, [r3, #0]
    		else z++;
    	}
    	break;
 8000634:	e050      	b.n	80006d8 <fsm_manual_run+0x330>
    		else z++;
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <fsm_manual_run+0x2a8>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	3301      	adds	r3, #1
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <fsm_manual_run+0x2a8>)
 800063e:	6013      	str	r3, [r2, #0]
    	break;
 8000640:	e04a      	b.n	80006d8 <fsm_manual_run+0x330>
 8000642:	bf00      	nop
 8000644:	2000003c 	.word	0x2000003c
 8000648:	2000006c 	.word	0x2000006c
 800064c:	20000078 	.word	0x20000078
 8000650:	20000098 	.word	0x20000098
 8000654:	200000a8 	.word	0x200000a8
    case ADJ_YELLOW:
    	 SCAN1(4);
 8000658:	2004      	movs	r0, #4
 800065a:	f000 f995 	bl	8000988 <SCAN1>
    		traffic_light(YELLOW);
 800065e:	2008      	movs	r0, #8
 8000660:	f000 ff40 	bl	80014e4 <traffic_light>
    	if(isButtonPressed(1) == 1){
 8000664:	2001      	movs	r0, #1
 8000666:	f000 f893 	bl	8000790 <isButtonPressed>
 800066a:	4603      	mov	r3, r0
 800066c:	2b01      	cmp	r3, #1
 800066e:	d110      	bne.n	8000692 <fsm_manual_run+0x2ea>
    		if(z>=99-y){z=1;}
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <fsm_manual_run+0x33c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f1c3 0263 	rsb	r2, r3, #99	; 0x63
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <fsm_manual_run+0x340>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	429a      	cmp	r2, r3
 800067e:	dc03      	bgt.n	8000688 <fsm_manual_run+0x2e0>
 8000680:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <fsm_manual_run+0x340>)
 8000682:	2201      	movs	r2, #1
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	e004      	b.n	8000692 <fsm_manual_run+0x2ea>
    		else z++;
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <fsm_manual_run+0x340>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	4a16      	ldr	r2, [pc, #88]	; (80006e8 <fsm_manual_run+0x340>)
 8000690:	6013      	str	r3, [r2, #0]
    	}
    	updateClockBuffer(z, z);
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <fsm_manual_run+0x340>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <fsm_manual_run+0x340>)
 8000698:	6812      	ldr	r2, [r2, #0]
 800069a:	4611      	mov	r1, r2
 800069c:	4618      	mov	r0, r3
 800069e:	f000 f91f 	bl	80008e0 <updateClockBuffer>
    	if(isButtonPressed(2)== 1){
 80006a2:	2002      	movs	r0, #2
 80006a4:	f000 f874 	bl	8000790 <isButtonPressed>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d116      	bne.n	80006dc <fsm_manual_run+0x334>
    		status = MODE1;
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <fsm_manual_run+0x344>)
 80006b0:	2209      	movs	r2, #9
 80006b2:	601a      	str	r2, [r3, #0]
    		x = y + z;
 80006b4:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <fsm_manual_run+0x33c>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <fsm_manual_run+0x340>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4413      	add	r3, r2
 80006be:	4a0c      	ldr	r2, [pc, #48]	; (80006f0 <fsm_manual_run+0x348>)
 80006c0:	6013      	str	r3, [r2, #0]
    	}
    	break;
 80006c2:	e00b      	b.n	80006dc <fsm_manual_run+0x334>
    default:
    	break;
 80006c4:	bf00      	nop
 80006c6:	e00a      	b.n	80006de <fsm_manual_run+0x336>
     break;
 80006c8:	bf00      	nop
 80006ca:	e008      	b.n	80006de <fsm_manual_run+0x336>
		break;
 80006cc:	bf00      	nop
 80006ce:	e006      	b.n	80006de <fsm_manual_run+0x336>
    	 break;
 80006d0:	bf00      	nop
 80006d2:	e004      	b.n	80006de <fsm_manual_run+0x336>
    	break;
 80006d4:	bf00      	nop
 80006d6:	e002      	b.n	80006de <fsm_manual_run+0x336>
    	break;
 80006d8:	bf00      	nop
 80006da:	e000      	b.n	80006de <fsm_manual_run+0x336>
    	break;
 80006dc:	bf00      	nop
	}
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200000a8 	.word	0x200000a8
 80006e8:	20000098 	.word	0x20000098
 80006ec:	2000003c 	.word	0x2000003c
 80006f0:	20000078 	.word	0x20000078

080006f4 <initializeArrays_for_Button>:
int TimeOutForKeyPress[NUMBER_OF_BUTTONS];
int flag[NUMBER_OF_BUTTONS];
uint16_t gpio_pin[NUMBER_OF_BUTTONS] = {BUTTON1_Pin, BUTTON2_Pin, BUTTON3_Pin};
GPIO_TypeDef* gpio_port[NUMBER_OF_BUTTONS] = {BUTTON1_GPIO_Port, BUTTON2_GPIO_Port, BUTTON3_GPIO_Port};

void initializeArrays_for_Button() {
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
  for (int i = 0; i < NUMBER_OF_BUTTONS; ++i) {
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	e021      	b.n	8000744 <initializeArrays_for_Button+0x50>
    KeyReg0[i] = NORMAL_STATE;
 8000700:	4a15      	ldr	r2, [pc, #84]	; (8000758 <initializeArrays_for_Button+0x64>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2101      	movs	r1, #1
 8000706:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    KeyReg1[i] = NORMAL_STATE;
 800070a:	4a14      	ldr	r2, [pc, #80]	; (800075c <initializeArrays_for_Button+0x68>)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2101      	movs	r1, #1
 8000710:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    KeyReg2[i] = NORMAL_STATE;
 8000714:	4a12      	ldr	r2, [pc, #72]	; (8000760 <initializeArrays_for_Button+0x6c>)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2101      	movs	r1, #1
 800071a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    KeyReg3[i] = NORMAL_STATE;
 800071e:	4a11      	ldr	r2, [pc, #68]	; (8000764 <initializeArrays_for_Button+0x70>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2101      	movs	r1, #1
 8000724:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    TimeOutForKeyPress[i] = 500;
 8000728:	4a0f      	ldr	r2, [pc, #60]	; (8000768 <initializeArrays_for_Button+0x74>)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000730:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    flag[i] = 0;
 8000734:	4a0d      	ldr	r2, [pc, #52]	; (800076c <initializeArrays_for_Button+0x78>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2100      	movs	r1, #0
 800073a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i = 0; i < NUMBER_OF_BUTTONS; ++i) {
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	3301      	adds	r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2b02      	cmp	r3, #2
 8000748:	ddda      	ble.n	8000700 <initializeArrays_for_Button+0xc>
  }
}
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	200000c4 	.word	0x200000c4
 800075c:	200000dc 	.word	0x200000dc
 8000760:	200000f4 	.word	0x200000f4
 8000764:	200000b8 	.word	0x200000b8
 8000768:	200000e8 	.word	0x200000e8
 800076c:	200000d0 	.word	0x200000d0

08000770 <subKeyProcess>:
void subKeyProcess(int index) {
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
    flag[index] = 1;
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <subKeyProcess+0x1c>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2101      	movs	r1, #1
 800077e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	200000d0 	.word	0x200000d0

08000790 <isButtonPressed>:

int isButtonPressed(int index){
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  if(flag[index] == 1) {
 8000798:	4a09      	ldr	r2, [pc, #36]	; (80007c0 <isButtonPressed+0x30>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d106      	bne.n	80007b2 <isButtonPressed+0x22>
    flag[index] = 0;
 80007a4:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <isButtonPressed+0x30>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2100      	movs	r1, #0
 80007aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return 1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	e000      	b.n	80007b4 <isButtonPressed+0x24>
  }
  return 0;
 80007b2:	2300      	movs	r3, #0
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	200000d0 	.word	0x200000d0

080007c4 <getKeyInput>:

void getKeyInput() {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
  for(int i = 0; i < NUMBER_OF_BUTTONS; i++) {
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	e071      	b.n	80008b4 <getKeyInput+0xf0>
    KeyReg0[i] = KeyReg1[i];
 80007d0:	4a3c      	ldr	r2, [pc, #240]	; (80008c4 <getKeyInput+0x100>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007d8:	493b      	ldr	r1, [pc, #236]	; (80008c8 <getKeyInput+0x104>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    KeyReg1[i] = KeyReg2[i];
 80007e0:	4a3a      	ldr	r2, [pc, #232]	; (80008cc <getKeyInput+0x108>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007e8:	4936      	ldr	r1, [pc, #216]	; (80008c4 <getKeyInput+0x100>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    KeyReg2[i] = HAL_GPIO_ReadPin(gpio_port[i], gpio_pin[i]);
 80007f0:	4a37      	ldr	r2, [pc, #220]	; (80008d0 <getKeyInput+0x10c>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007f8:	4936      	ldr	r1, [pc, #216]	; (80008d4 <getKeyInput+0x110>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000800:	4619      	mov	r1, r3
 8000802:	4610      	mov	r0, r2
 8000804:	f001 fac4 	bl	8001d90 <HAL_GPIO_ReadPin>
 8000808:	4603      	mov	r3, r0
 800080a:	4619      	mov	r1, r3
 800080c:	4a2f      	ldr	r2, [pc, #188]	; (80008cc <getKeyInput+0x108>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000814:	4a2b      	ldr	r2, [pc, #172]	; (80008c4 <getKeyInput+0x100>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800081c:	492a      	ldr	r1, [pc, #168]	; (80008c8 <getKeyInput+0x104>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000824:	429a      	cmp	r2, r3
 8000826:	d142      	bne.n	80008ae <getKeyInput+0xea>
 8000828:	4a26      	ldr	r2, [pc, #152]	; (80008c4 <getKeyInput+0x100>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000830:	4926      	ldr	r1, [pc, #152]	; (80008cc <getKeyInput+0x108>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000838:	429a      	cmp	r2, r3
 800083a:	d138      	bne.n	80008ae <getKeyInput+0xea>
      if (KeyReg3[i] != KeyReg2[i]){
 800083c:	4a26      	ldr	r2, [pc, #152]	; (80008d8 <getKeyInput+0x114>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000844:	4921      	ldr	r1, [pc, #132]	; (80008cc <getKeyInput+0x108>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800084c:	429a      	cmp	r2, r3
 800084e:	d011      	beq.n	8000874 <getKeyInput+0xb0>
        KeyReg3[i] = KeyReg2[i];
 8000850:	4a1e      	ldr	r2, [pc, #120]	; (80008cc <getKeyInput+0x108>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000858:	491f      	ldr	r1, [pc, #124]	; (80008d8 <getKeyInput+0x114>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (KeyReg2[i] == PRESSED_STATE) {
 8000860:	4a1a      	ldr	r2, [pc, #104]	; (80008cc <getKeyInput+0x108>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d120      	bne.n	80008ae <getKeyInput+0xea>
          subKeyProcess(i);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff ff7f 	bl	8000770 <subKeyProcess>
 8000872:	e01c      	b.n	80008ae <getKeyInput+0xea>
        }
      } else {
        TimeOutForKeyPress[i]--;
 8000874:	4a19      	ldr	r2, [pc, #100]	; (80008dc <getKeyInput+0x118>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800087c:	1e5a      	subs	r2, r3, #1
 800087e:	4917      	ldr	r1, [pc, #92]	; (80008dc <getKeyInput+0x118>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (TimeOutForKeyPress[i] == 0){
 8000886:	4a15      	ldr	r2, [pc, #84]	; (80008dc <getKeyInput+0x118>)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d10d      	bne.n	80008ae <getKeyInput+0xea>
          TimeOutForKeyPress[i] = 200;
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <getKeyInput+0x118>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	21c8      	movs	r1, #200	; 0xc8
 8000898:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          if (KeyReg2[i] == PRESSED_STATE){
 800089c:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <getKeyInput+0x108>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d102      	bne.n	80008ae <getKeyInput+0xea>
            subKeyProcess(i);
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ff61 	bl	8000770 <subKeyProcess>
  for(int i = 0; i < NUMBER_OF_BUTTONS; i++) {
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3301      	adds	r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	dd8a      	ble.n	80007d0 <getKeyInput+0xc>
          }
        }
      }
    }
  }
}
 80008ba:	bf00      	nop
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200000dc 	.word	0x200000dc
 80008c8:	200000c4 	.word	0x200000c4
 80008cc:	200000f4 	.word	0x200000f4
 80008d0:	20000008 	.word	0x20000008
 80008d4:	20000000 	.word	0x20000000
 80008d8:	200000b8 	.word	0x200000b8
 80008dc:	200000e8 	.word	0x200000e8

080008e0 <updateClockBuffer>:
 *      Author: Acer
 */
#include "led_display.h"


void updateClockBuffer(a,b){
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
	digit1 = a/10;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a20      	ldr	r2, [pc, #128]	; (8000970 <updateClockBuffer+0x90>)
 80008ee:	fb82 1203 	smull	r1, r2, r2, r3
 80008f2:	1092      	asrs	r2, r2, #2
 80008f4:	17db      	asrs	r3, r3, #31
 80008f6:	1ad3      	subs	r3, r2, r3
 80008f8:	4a1e      	ldr	r2, [pc, #120]	; (8000974 <updateClockBuffer+0x94>)
 80008fa:	6013      	str	r3, [r2, #0]
	digit2 = a%10;
 80008fc:	6879      	ldr	r1, [r7, #4]
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <updateClockBuffer+0x90>)
 8000900:	fb83 2301 	smull	r2, r3, r3, r1
 8000904:	109a      	asrs	r2, r3, #2
 8000906:	17cb      	asrs	r3, r1, #31
 8000908:	1ad2      	subs	r2, r2, r3
 800090a:	4613      	mov	r3, r2
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	4413      	add	r3, r2
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	1aca      	subs	r2, r1, r3
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <updateClockBuffer+0x98>)
 8000916:	601a      	str	r2, [r3, #0]
	digit3 = b/10;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	4a15      	ldr	r2, [pc, #84]	; (8000970 <updateClockBuffer+0x90>)
 800091c:	fb82 1203 	smull	r1, r2, r2, r3
 8000920:	1092      	asrs	r2, r2, #2
 8000922:	17db      	asrs	r3, r3, #31
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	4a15      	ldr	r2, [pc, #84]	; (800097c <updateClockBuffer+0x9c>)
 8000928:	6013      	str	r3, [r2, #0]
	digit4 = b%10;
 800092a:	6839      	ldr	r1, [r7, #0]
 800092c:	4b10      	ldr	r3, [pc, #64]	; (8000970 <updateClockBuffer+0x90>)
 800092e:	fb83 2301 	smull	r2, r3, r3, r1
 8000932:	109a      	asrs	r2, r3, #2
 8000934:	17cb      	asrs	r3, r1, #31
 8000936:	1ad2      	subs	r2, r2, r3
 8000938:	4613      	mov	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	4413      	add	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	1aca      	subs	r2, r1, r3
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <updateClockBuffer+0xa0>)
 8000944:	601a      	str	r2, [r3, #0]
	led_buffer[0] = digit1;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <updateClockBuffer+0x94>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <updateClockBuffer+0xa4>)
 800094c:	6013      	str	r3, [r2, #0]
	led_buffer[1] = digit2;
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <updateClockBuffer+0x98>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <updateClockBuffer+0xa4>)
 8000954:	6053      	str	r3, [r2, #4]
	led_buffer[2] = digit3;
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <updateClockBuffer+0x9c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <updateClockBuffer+0xa4>)
 800095c:	6093      	str	r3, [r2, #8]
	led_buffer[3] = digit4;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <updateClockBuffer+0xa0>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <updateClockBuffer+0xa4>)
 8000964:	60d3      	str	r3, [r2, #12]
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	66666667 	.word	0x66666667
 8000974:	200000b4 	.word	0x200000b4
 8000978:	200000a0 	.word	0x200000a0
 800097c:	200000ac 	.word	0x200000ac
 8000980:	20000070 	.word	0x20000070
 8000984:	20000088 	.word	0x20000088

08000988 <SCAN1>:

void SCAN1(int n){
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b04      	cmp	r3, #4
 8000994:	f200 80e5 	bhi.w	8000b62 <SCAN1+0x1da>
 8000998:	a201      	add	r2, pc, #4	; (adr r2, 80009a0 <SCAN1+0x18>)
 800099a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099e:	bf00      	nop
 80009a0:	080009b5 	.word	0x080009b5
 80009a4:	08000a0b 	.word	0x08000a0b
 80009a8:	08000a61 	.word	0x08000a61
 80009ac:	08000ab7 	.word	0x08000ab7
 80009b0:	08000b0d 	.word	0x08000b0d
	switch (n){
	   case 0:
	  		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, 0 );
 80009b4:	2200      	movs	r2, #0
 80009b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ba:	486c      	ldr	r0, [pc, #432]	; (8000b6c <SCAN1+0x1e4>)
 80009bc:	f001 f9ff 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, 0);
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c6:	4869      	ldr	r0, [pc, #420]	; (8000b6c <SCAN1+0x1e4>)
 80009c8:	f001 f9f9 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, 0);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d2:	4866      	ldr	r0, [pc, #408]	; (8000b6c <SCAN1+0x1e4>)
 80009d4:	f001 f9f3 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin,0 );
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009de:	4863      	ldr	r0, [pc, #396]	; (8000b6c <SCAN1+0x1e4>)
 80009e0:	f001 f9ed 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin,0 );
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ea:	4860      	ldr	r0, [pc, #384]	; (8000b6c <SCAN1+0x1e4>)
 80009ec:	f001 f9e7 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, 0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009f6:	485d      	ldr	r0, [pc, #372]	; (8000b6c <SCAN1+0x1e4>)
 80009f8:	f001 f9e1 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, 1);
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a02:	485a      	ldr	r0, [pc, #360]	; (8000b6c <SCAN1+0x1e4>)
 8000a04:	f001 f9db 	bl	8001dbe <HAL_GPIO_WritePin>
	  		break;
 8000a08:	e0ac      	b.n	8000b64 <SCAN1+0x1dc>

	   case 1:
	  		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, 1 );
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a10:	4856      	ldr	r0, [pc, #344]	; (8000b6c <SCAN1+0x1e4>)
 8000a12:	f001 f9d4 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a1c:	4853      	ldr	r0, [pc, #332]	; (8000b6c <SCAN1+0x1e4>)
 8000a1e:	f001 f9ce 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a28:	4850      	ldr	r0, [pc, #320]	; (8000b6c <SCAN1+0x1e4>)
 8000a2a:	f001 f9c8 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin,1 );
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a34:	484d      	ldr	r0, [pc, #308]	; (8000b6c <SCAN1+0x1e4>)
 8000a36:	f001 f9c2 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin,1 );
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a40:	484a      	ldr	r0, [pc, #296]	; (8000b6c <SCAN1+0x1e4>)
 8000a42:	f001 f9bc 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, 1);
 8000a46:	2201      	movs	r2, #1
 8000a48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a4c:	4847      	ldr	r0, [pc, #284]	; (8000b6c <SCAN1+0x1e4>)
 8000a4e:	f001 f9b6 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, 1);
 8000a52:	2201      	movs	r2, #1
 8000a54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a58:	4844      	ldr	r0, [pc, #272]	; (8000b6c <SCAN1+0x1e4>)
 8000a5a:	f001 f9b0 	bl	8001dbe <HAL_GPIO_WritePin>
	  		break;
 8000a5e:	e081      	b.n	8000b64 <SCAN1+0x1dc>

	   case 2:
	  		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, 0 );
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a66:	4841      	ldr	r0, [pc, #260]	; (8000b6c <SCAN1+0x1e4>)
 8000a68:	f001 f9a9 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a72:	483e      	ldr	r0, [pc, #248]	; (8000b6c <SCAN1+0x1e4>)
 8000a74:	f001 f9a3 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, 1);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a7e:	483b      	ldr	r0, [pc, #236]	; (8000b6c <SCAN1+0x1e4>)
 8000a80:	f001 f99d 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin,0 );
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a8a:	4838      	ldr	r0, [pc, #224]	; (8000b6c <SCAN1+0x1e4>)
 8000a8c:	f001 f997 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin,0 );
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a96:	4835      	ldr	r0, [pc, #212]	; (8000b6c <SCAN1+0x1e4>)
 8000a98:	f001 f991 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, 1);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa2:	4832      	ldr	r0, [pc, #200]	; (8000b6c <SCAN1+0x1e4>)
 8000aa4:	f001 f98b 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aae:	482f      	ldr	r0, [pc, #188]	; (8000b6c <SCAN1+0x1e4>)
 8000ab0:	f001 f985 	bl	8001dbe <HAL_GPIO_WritePin>
	  		break;
 8000ab4:	e056      	b.n	8000b64 <SCAN1+0x1dc>

	   case 3:
	  		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, 0 );
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000abc:	482b      	ldr	r0, [pc, #172]	; (8000b6c <SCAN1+0x1e4>)
 8000abe:	f001 f97e 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac8:	4828      	ldr	r0, [pc, #160]	; (8000b6c <SCAN1+0x1e4>)
 8000aca:	f001 f978 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ad4:	4825      	ldr	r0, [pc, #148]	; (8000b6c <SCAN1+0x1e4>)
 8000ad6:	f001 f972 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin,0 );
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae0:	4822      	ldr	r0, [pc, #136]	; (8000b6c <SCAN1+0x1e4>)
 8000ae2:	f001 f96c 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin,1 );
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aec:	481f      	ldr	r0, [pc, #124]	; (8000b6c <SCAN1+0x1e4>)
 8000aee:	f001 f966 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, 1);
 8000af2:	2201      	movs	r2, #1
 8000af4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000af8:	481c      	ldr	r0, [pc, #112]	; (8000b6c <SCAN1+0x1e4>)
 8000afa:	f001 f960 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b04:	4819      	ldr	r0, [pc, #100]	; (8000b6c <SCAN1+0x1e4>)
 8000b06:	f001 f95a 	bl	8001dbe <HAL_GPIO_WritePin>
	  		break;
 8000b0a:	e02b      	b.n	8000b64 <SCAN1+0x1dc>

	   case 4:
	  		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, 1 );
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b12:	4816      	ldr	r0, [pc, #88]	; (8000b6c <SCAN1+0x1e4>)
 8000b14:	f001 f953 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1e:	4813      	ldr	r0, [pc, #76]	; (8000b6c <SCAN1+0x1e4>)
 8000b20:	f001 f94d 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b2a:	4810      	ldr	r0, [pc, #64]	; (8000b6c <SCAN1+0x1e4>)
 8000b2c:	f001 f947 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin,1 );
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b36:	480d      	ldr	r0, [pc, #52]	; (8000b6c <SCAN1+0x1e4>)
 8000b38:	f001 f941 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin,1 );
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b42:	480a      	ldr	r0, [pc, #40]	; (8000b6c <SCAN1+0x1e4>)
 8000b44:	f001 f93b 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b4e:	4807      	ldr	r0, [pc, #28]	; (8000b6c <SCAN1+0x1e4>)
 8000b50:	f001 f935 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b5a:	4804      	ldr	r0, [pc, #16]	; (8000b6c <SCAN1+0x1e4>)
 8000b5c:	f001 f92f 	bl	8001dbe <HAL_GPIO_WritePin>
	  		break;
 8000b60:	e000      	b.n	8000b64 <SCAN1+0x1dc>
	   default:
		   break;
 8000b62:	bf00      	nop
	}
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40010c00 	.word	0x40010c00

08000b70 <SCAN>:
void SCAN(int n){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	switch (led_buffer[n]){
 8000b78:	4ac5      	ldr	r2, [pc, #788]	; (8000e90 <SCAN+0x320>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b80:	2b09      	cmp	r3, #9
 8000b82:	f200 817f 	bhi.w	8000e84 <SCAN+0x314>
 8000b86:	a201      	add	r2, pc, #4	; (adr r2, 8000b8c <SCAN+0x1c>)
 8000b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8c:	08000bb5 	.word	0x08000bb5
 8000b90:	08000bfd 	.word	0x08000bfd
 8000b94:	08000c45 	.word	0x08000c45
 8000b98:	08000c8d 	.word	0x08000c8d
 8000b9c:	08000cd5 	.word	0x08000cd5
 8000ba0:	08000d1d 	.word	0x08000d1d
 8000ba4:	08000d65 	.word	0x08000d65
 8000ba8:	08000dad 	.word	0x08000dad
 8000bac:	08000df5 	.word	0x08000df5
 8000bb0:	08000e3d 	.word	0x08000e3d
	   case 0:
	  		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0 );
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	48b6      	ldr	r0, [pc, #728]	; (8000e94 <SCAN+0x324>)
 8000bba:	f001 f900 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2104      	movs	r1, #4
 8000bc2:	48b4      	ldr	r0, [pc, #720]	; (8000e94 <SCAN+0x324>)
 8000bc4:	f001 f8fb 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2108      	movs	r1, #8
 8000bcc:	48b1      	ldr	r0, [pc, #708]	; (8000e94 <SCAN+0x324>)
 8000bce:	f001 f8f6 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin,0 );
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2110      	movs	r1, #16
 8000bd6:	48af      	ldr	r0, [pc, #700]	; (8000e94 <SCAN+0x324>)
 8000bd8:	f001 f8f1 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin,0 );
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2120      	movs	r1, #32
 8000be0:	48ac      	ldr	r0, [pc, #688]	; (8000e94 <SCAN+0x324>)
 8000be2:	f001 f8ec 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2140      	movs	r1, #64	; 0x40
 8000bea:	48aa      	ldr	r0, [pc, #680]	; (8000e94 <SCAN+0x324>)
 8000bec:	f001 f8e7 	bl	8001dbe <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2180      	movs	r1, #128	; 0x80
 8000bf4:	48a7      	ldr	r0, [pc, #668]	; (8000e94 <SCAN+0x324>)
 8000bf6:	f001 f8e2 	bl	8001dbe <HAL_GPIO_WritePin>
	  		break;
 8000bfa:	e144      	b.n	8000e86 <SCAN+0x316>

	   case 1:
	 		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 1);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2102      	movs	r1, #2
 8000c00:	48a4      	ldr	r0, [pc, #656]	; (8000e94 <SCAN+0x324>)
 8000c02:	f001 f8dc 	bl	8001dbe <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2104      	movs	r1, #4
 8000c0a:	48a2      	ldr	r0, [pc, #648]	; (8000e94 <SCAN+0x324>)
 8000c0c:	f001 f8d7 	bl	8001dbe <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2108      	movs	r1, #8
 8000c14:	489f      	ldr	r0, [pc, #636]	; (8000e94 <SCAN+0x324>)
 8000c16:	f001 f8d2 	bl	8001dbe <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 1);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2110      	movs	r1, #16
 8000c1e:	489d      	ldr	r0, [pc, #628]	; (8000e94 <SCAN+0x324>)
 8000c20:	f001 f8cd 	bl	8001dbe <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2120      	movs	r1, #32
 8000c28:	489a      	ldr	r0, [pc, #616]	; (8000e94 <SCAN+0x324>)
 8000c2a:	f001 f8c8 	bl	8001dbe <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2140      	movs	r1, #64	; 0x40
 8000c32:	4898      	ldr	r0, [pc, #608]	; (8000e94 <SCAN+0x324>)
 8000c34:	f001 f8c3 	bl	8001dbe <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2180      	movs	r1, #128	; 0x80
 8000c3c:	4895      	ldr	r0, [pc, #596]	; (8000e94 <SCAN+0x324>)
 8000c3e:	f001 f8be 	bl	8001dbe <HAL_GPIO_WritePin>
	 		break;
 8000c42:	e120      	b.n	8000e86 <SCAN+0x316>
	   case 2:
	 		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2102      	movs	r1, #2
 8000c48:	4892      	ldr	r0, [pc, #584]	; (8000e94 <SCAN+0x324>)
 8000c4a:	f001 f8b8 	bl	8001dbe <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2104      	movs	r1, #4
 8000c52:	4890      	ldr	r0, [pc, #576]	; (8000e94 <SCAN+0x324>)
 8000c54:	f001 f8b3 	bl	8001dbe <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 1);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2108      	movs	r1, #8
 8000c5c:	488d      	ldr	r0, [pc, #564]	; (8000e94 <SCAN+0x324>)
 8000c5e:	f001 f8ae 	bl	8001dbe <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2110      	movs	r1, #16
 8000c66:	488b      	ldr	r0, [pc, #556]	; (8000e94 <SCAN+0x324>)
 8000c68:	f001 f8a9 	bl	8001dbe <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2120      	movs	r1, #32
 8000c70:	4888      	ldr	r0, [pc, #544]	; (8000e94 <SCAN+0x324>)
 8000c72:	f001 f8a4 	bl	8001dbe <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 8000c76:	2201      	movs	r2, #1
 8000c78:	2140      	movs	r1, #64	; 0x40
 8000c7a:	4886      	ldr	r0, [pc, #536]	; (8000e94 <SCAN+0x324>)
 8000c7c:	f001 f89f 	bl	8001dbe <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2180      	movs	r1, #128	; 0x80
 8000c84:	4883      	ldr	r0, [pc, #524]	; (8000e94 <SCAN+0x324>)
 8000c86:	f001 f89a 	bl	8001dbe <HAL_GPIO_WritePin>
	 		break;
 8000c8a:	e0fc      	b.n	8000e86 <SCAN+0x316>
	   case 3:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2102      	movs	r1, #2
 8000c90:	4880      	ldr	r0, [pc, #512]	; (8000e94 <SCAN+0x324>)
 8000c92:	f001 f894 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2104      	movs	r1, #4
 8000c9a:	487e      	ldr	r0, [pc, #504]	; (8000e94 <SCAN+0x324>)
 8000c9c:	f001 f88f 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	487b      	ldr	r0, [pc, #492]	; (8000e94 <SCAN+0x324>)
 8000ca6:	f001 f88a 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2110      	movs	r1, #16
 8000cae:	4879      	ldr	r0, [pc, #484]	; (8000e94 <SCAN+0x324>)
 8000cb0:	f001 f885 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2120      	movs	r1, #32
 8000cb8:	4876      	ldr	r0, [pc, #472]	; (8000e94 <SCAN+0x324>)
 8000cba:	f001 f880 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2140      	movs	r1, #64	; 0x40
 8000cc2:	4874      	ldr	r0, [pc, #464]	; (8000e94 <SCAN+0x324>)
 8000cc4:	f001 f87b 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	4871      	ldr	r0, [pc, #452]	; (8000e94 <SCAN+0x324>)
 8000cce:	f001 f876 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 8000cd2:	e0d8      	b.n	8000e86 <SCAN+0x316>
	   case 4:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 1 );
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2102      	movs	r1, #2
 8000cd8:	486e      	ldr	r0, [pc, #440]	; (8000e94 <SCAN+0x324>)
 8000cda:	f001 f870 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0 );
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	486c      	ldr	r0, [pc, #432]	; (8000e94 <SCAN+0x324>)
 8000ce4:	f001 f86b 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2108      	movs	r1, #8
 8000cec:	4869      	ldr	r0, [pc, #420]	; (8000e94 <SCAN+0x324>)
 8000cee:	f001 f866 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 1 );
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2110      	movs	r1, #16
 8000cf6:	4867      	ldr	r0, [pc, #412]	; (8000e94 <SCAN+0x324>)
 8000cf8:	f001 f861 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2120      	movs	r1, #32
 8000d00:	4864      	ldr	r0, [pc, #400]	; (8000e94 <SCAN+0x324>)
 8000d02:	f001 f85c 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2140      	movs	r1, #64	; 0x40
 8000d0a:	4862      	ldr	r0, [pc, #392]	; (8000e94 <SCAN+0x324>)
 8000d0c:	f001 f857 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	485f      	ldr	r0, [pc, #380]	; (8000e94 <SCAN+0x324>)
 8000d16:	f001 f852 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 8000d1a:	e0b4      	b.n	8000e86 <SCAN+0x316>
	   case 5:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0 );
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2102      	movs	r1, #2
 8000d20:	485c      	ldr	r0, [pc, #368]	; (8000e94 <SCAN+0x324>)
 8000d22:	f001 f84c 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 1 );
 8000d26:	2201      	movs	r2, #1
 8000d28:	2104      	movs	r1, #4
 8000d2a:	485a      	ldr	r0, [pc, #360]	; (8000e94 <SCAN+0x324>)
 8000d2c:	f001 f847 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2108      	movs	r1, #8
 8000d34:	4857      	ldr	r0, [pc, #348]	; (8000e94 <SCAN+0x324>)
 8000d36:	f001 f842 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0 );
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2110      	movs	r1, #16
 8000d3e:	4855      	ldr	r0, [pc, #340]	; (8000e94 <SCAN+0x324>)
 8000d40:	f001 f83d 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1 );
 8000d44:	2201      	movs	r2, #1
 8000d46:	2120      	movs	r1, #32
 8000d48:	4852      	ldr	r0, [pc, #328]	; (8000e94 <SCAN+0x324>)
 8000d4a:	f001 f838 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2140      	movs	r1, #64	; 0x40
 8000d52:	4850      	ldr	r0, [pc, #320]	; (8000e94 <SCAN+0x324>)
 8000d54:	f001 f833 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2180      	movs	r1, #128	; 0x80
 8000d5c:	484d      	ldr	r0, [pc, #308]	; (8000e94 <SCAN+0x324>)
 8000d5e:	f001 f82e 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 8000d62:	e090      	b.n	8000e86 <SCAN+0x316>
	   case 6:

			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0 );
 8000d64:	2200      	movs	r2, #0
 8000d66:	2102      	movs	r1, #2
 8000d68:	484a      	ldr	r0, [pc, #296]	; (8000e94 <SCAN+0x324>)
 8000d6a:	f001 f828 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 1 );
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2104      	movs	r1, #4
 8000d72:	4848      	ldr	r0, [pc, #288]	; (8000e94 <SCAN+0x324>)
 8000d74:	f001 f823 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2108      	movs	r1, #8
 8000d7c:	4845      	ldr	r0, [pc, #276]	; (8000e94 <SCAN+0x324>)
 8000d7e:	f001 f81e 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin,0 );
 8000d82:	2200      	movs	r2, #0
 8000d84:	2110      	movs	r1, #16
 8000d86:	4843      	ldr	r0, [pc, #268]	; (8000e94 <SCAN+0x324>)
 8000d88:	f001 f819 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin,0 );
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2120      	movs	r1, #32
 8000d90:	4840      	ldr	r0, [pc, #256]	; (8000e94 <SCAN+0x324>)
 8000d92:	f001 f814 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2140      	movs	r1, #64	; 0x40
 8000d9a:	483e      	ldr	r0, [pc, #248]	; (8000e94 <SCAN+0x324>)
 8000d9c:	f001 f80f 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	483b      	ldr	r0, [pc, #236]	; (8000e94 <SCAN+0x324>)
 8000da6:	f001 f80a 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 8000daa:	e06c      	b.n	8000e86 <SCAN+0x316>
	   case 7:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0 );
 8000dac:	2200      	movs	r2, #0
 8000dae:	2102      	movs	r1, #2
 8000db0:	4838      	ldr	r0, [pc, #224]	; (8000e94 <SCAN+0x324>)
 8000db2:	f001 f804 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0 );
 8000db6:	2200      	movs	r2, #0
 8000db8:	2104      	movs	r1, #4
 8000dba:	4836      	ldr	r0, [pc, #216]	; (8000e94 <SCAN+0x324>)
 8000dbc:	f000 ffff 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2108      	movs	r1, #8
 8000dc4:	4833      	ldr	r0, [pc, #204]	; (8000e94 <SCAN+0x324>)
 8000dc6:	f000 fffa 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 1 );
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2110      	movs	r1, #16
 8000dce:	4831      	ldr	r0, [pc, #196]	; (8000e94 <SCAN+0x324>)
 8000dd0:	f000 fff5 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1 );
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2120      	movs	r1, #32
 8000dd8:	482e      	ldr	r0, [pc, #184]	; (8000e94 <SCAN+0x324>)
 8000dda:	f000 fff0 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 8000dde:	2201      	movs	r2, #1
 8000de0:	2140      	movs	r1, #64	; 0x40
 8000de2:	482c      	ldr	r0, [pc, #176]	; (8000e94 <SCAN+0x324>)
 8000de4:	f000 ffeb 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);
 8000de8:	2201      	movs	r2, #1
 8000dea:	2180      	movs	r1, #128	; 0x80
 8000dec:	4829      	ldr	r0, [pc, #164]	; (8000e94 <SCAN+0x324>)
 8000dee:	f000 ffe6 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 8000df2:	e048      	b.n	8000e86 <SCAN+0x316>
	   case 8:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0 );
 8000df4:	2200      	movs	r2, #0
 8000df6:	2102      	movs	r1, #2
 8000df8:	4826      	ldr	r0, [pc, #152]	; (8000e94 <SCAN+0x324>)
 8000dfa:	f000 ffe0 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0 );
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2104      	movs	r1, #4
 8000e02:	4824      	ldr	r0, [pc, #144]	; (8000e94 <SCAN+0x324>)
 8000e04:	f000 ffdb 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2108      	movs	r1, #8
 8000e0c:	4821      	ldr	r0, [pc, #132]	; (8000e94 <SCAN+0x324>)
 8000e0e:	f000 ffd6 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin,0 );
 8000e12:	2200      	movs	r2, #0
 8000e14:	2110      	movs	r1, #16
 8000e16:	481f      	ldr	r0, [pc, #124]	; (8000e94 <SCAN+0x324>)
 8000e18:	f000 ffd1 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin,0 );
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2120      	movs	r1, #32
 8000e20:	481c      	ldr	r0, [pc, #112]	; (8000e94 <SCAN+0x324>)
 8000e22:	f000 ffcc 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2140      	movs	r1, #64	; 0x40
 8000e2a:	481a      	ldr	r0, [pc, #104]	; (8000e94 <SCAN+0x324>)
 8000e2c:	f000 ffc7 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2180      	movs	r1, #128	; 0x80
 8000e34:	4817      	ldr	r0, [pc, #92]	; (8000e94 <SCAN+0x324>)
 8000e36:	f000 ffc2 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 8000e3a:	e024      	b.n	8000e86 <SCAN+0x316>
	   case 9:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0 );
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2102      	movs	r1, #2
 8000e40:	4814      	ldr	r0, [pc, #80]	; (8000e94 <SCAN+0x324>)
 8000e42:	f000 ffbc 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0 );
 8000e46:	2200      	movs	r2, #0
 8000e48:	2104      	movs	r1, #4
 8000e4a:	4812      	ldr	r0, [pc, #72]	; (8000e94 <SCAN+0x324>)
 8000e4c:	f000 ffb7 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2108      	movs	r1, #8
 8000e54:	480f      	ldr	r0, [pc, #60]	; (8000e94 <SCAN+0x324>)
 8000e56:	f000 ffb2 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin,0 );
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2110      	movs	r1, #16
 8000e5e:	480d      	ldr	r0, [pc, #52]	; (8000e94 <SCAN+0x324>)
 8000e60:	f000 ffad 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 8000e64:	2201      	movs	r2, #1
 8000e66:	2120      	movs	r1, #32
 8000e68:	480a      	ldr	r0, [pc, #40]	; (8000e94 <SCAN+0x324>)
 8000e6a:	f000 ffa8 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2140      	movs	r1, #64	; 0x40
 8000e72:	4808      	ldr	r0, [pc, #32]	; (8000e94 <SCAN+0x324>)
 8000e74:	f000 ffa3 	bl	8001dbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2180      	movs	r1, #128	; 0x80
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <SCAN+0x324>)
 8000e7e:	f000 ff9e 	bl	8001dbe <HAL_GPIO_WritePin>
			break;
 8000e82:	e000      	b.n	8000e86 <SCAN+0x316>
	   default:
		   break;
 8000e84:	bf00      	nop
	}
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000088 	.word	0x20000088
 8000e94:	40010800 	.word	0x40010800

08000e98 <update7SEG>:

void update7SEG(int index_led){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d86a      	bhi.n	8000f7c <update7SEG+0xe4>
 8000ea6:	a201      	add	r2, pc, #4	; (adr r2, 8000eac <update7SEG+0x14>)
 8000ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eac:	08000ebd 	.word	0x08000ebd
 8000eb0:	08000eed 	.word	0x08000eed
 8000eb4:	08000f1d 	.word	0x08000f1d
 8000eb8:	08000f4d 	.word	0x08000f4d
	switch (index_led){
	case 0:
		   HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	4831      	ldr	r0, [pc, #196]	; (8000f88 <update7SEG+0xf0>)
 8000ec2:	f000 ff7c 	bl	8001dbe <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2102      	movs	r1, #2
 8000eca:	482f      	ldr	r0, [pc, #188]	; (8000f88 <update7SEG+0xf0>)
 8000ecc:	f000 ff77 	bl	8001dbe <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	482c      	ldr	r0, [pc, #176]	; (8000f88 <update7SEG+0xf0>)
 8000ed6:	f000 ff72 	bl	8001dbe <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2108      	movs	r1, #8
 8000ede:	482a      	ldr	r0, [pc, #168]	; (8000f88 <update7SEG+0xf0>)
 8000ee0:	f000 ff6d 	bl	8001dbe <HAL_GPIO_WritePin>
		   SCAN(index_led);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fe43 	bl	8000b70 <SCAN>
		   break;
 8000eea:	e048      	b.n	8000f7e <update7SEG+0xe6>
	case 1:
		   HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000eec:	2201      	movs	r2, #1
 8000eee:	2101      	movs	r1, #1
 8000ef0:	4825      	ldr	r0, [pc, #148]	; (8000f88 <update7SEG+0xf0>)
 8000ef2:	f000 ff64 	bl	8001dbe <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2102      	movs	r1, #2
 8000efa:	4823      	ldr	r0, [pc, #140]	; (8000f88 <update7SEG+0xf0>)
 8000efc:	f000 ff5f 	bl	8001dbe <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000f00:	2201      	movs	r2, #1
 8000f02:	2104      	movs	r1, #4
 8000f04:	4820      	ldr	r0, [pc, #128]	; (8000f88 <update7SEG+0xf0>)
 8000f06:	f000 ff5a 	bl	8001dbe <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2108      	movs	r1, #8
 8000f0e:	481e      	ldr	r0, [pc, #120]	; (8000f88 <update7SEG+0xf0>)
 8000f10:	f000 ff55 	bl	8001dbe <HAL_GPIO_WritePin>
		   SCAN(index_led);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff fe2b 	bl	8000b70 <SCAN>
		   break;
 8000f1a:	e030      	b.n	8000f7e <update7SEG+0xe6>
	case 2:
		   HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2101      	movs	r1, #1
 8000f20:	4819      	ldr	r0, [pc, #100]	; (8000f88 <update7SEG+0xf0>)
 8000f22:	f000 ff4c 	bl	8001dbe <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2102      	movs	r1, #2
 8000f2a:	4817      	ldr	r0, [pc, #92]	; (8000f88 <update7SEG+0xf0>)
 8000f2c:	f000 ff47 	bl	8001dbe <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2104      	movs	r1, #4
 8000f34:	4814      	ldr	r0, [pc, #80]	; (8000f88 <update7SEG+0xf0>)
 8000f36:	f000 ff42 	bl	8001dbe <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2108      	movs	r1, #8
 8000f3e:	4812      	ldr	r0, [pc, #72]	; (8000f88 <update7SEG+0xf0>)
 8000f40:	f000 ff3d 	bl	8001dbe <HAL_GPIO_WritePin>
		   SCAN(index_led);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff fe13 	bl	8000b70 <SCAN>
		   break;
 8000f4a:	e018      	b.n	8000f7e <update7SEG+0xe6>
	case 3:
		   HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2101      	movs	r1, #1
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <update7SEG+0xf0>)
 8000f52:	f000 ff34 	bl	8001dbe <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000f56:	2201      	movs	r2, #1
 8000f58:	2102      	movs	r1, #2
 8000f5a:	480b      	ldr	r0, [pc, #44]	; (8000f88 <update7SEG+0xf0>)
 8000f5c:	f000 ff2f 	bl	8001dbe <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2104      	movs	r1, #4
 8000f64:	4808      	ldr	r0, [pc, #32]	; (8000f88 <update7SEG+0xf0>)
 8000f66:	f000 ff2a 	bl	8001dbe <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0 );
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2108      	movs	r1, #8
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <update7SEG+0xf0>)
 8000f70:	f000 ff25 	bl	8001dbe <HAL_GPIO_WritePin>
		   SCAN(index_led);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff fdfb 	bl	8000b70 <SCAN>
		   break;
 8000f7a:	e000      	b.n	8000f7e <update7SEG+0xe6>
	default:
		break;
 8000f7c:	bf00      	nop
	}
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40010c00 	.word	0x40010c00

08000f8c <SEVled_run>:
void reset_buffer(){a=0;b=0;}
void SEVled_run(int n ,int m){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
	if(timer3_flag == 1){
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <SEVled_run+0x60>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d122      	bne.n	8000fe4 <SEVled_run+0x58>
		a--;b--;
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <SEVled_run+0x64>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <SEVled_run+0x64>)
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <SEVled_run+0x68>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	4a11      	ldr	r2, [pc, #68]	; (8000ff4 <SEVled_run+0x68>)
 8000fb0:	6013      	str	r3, [r2, #0]
		setTimer3(90);
 8000fb2:	205a      	movs	r0, #90	; 0x5a
 8000fb4:	f000 f962 	bl	800127c <setTimer3>
		if(a <= 0){a = n;}
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <SEVled_run+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	dc02      	bgt.n	8000fc6 <SEVled_run+0x3a>
 8000fc0:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <SEVled_run+0x64>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
        if (b <= 0){b = m;}
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <SEVled_run+0x68>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	dc02      	bgt.n	8000fd4 <SEVled_run+0x48>
 8000fce:	4a09      	ldr	r2, [pc, #36]	; (8000ff4 <SEVled_run+0x68>)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	6013      	str	r3, [r2, #0]
        updateClockBuffer(a,b);
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <SEVled_run+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <SEVled_run+0x68>)
 8000fda:	6812      	ldr	r2, [r2, #0]
 8000fdc:	4611      	mov	r1, r2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fc7e 	bl	80008e0 <updateClockBuffer>
	}

}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000050 	.word	0x20000050
 8000ff0:	200000b0 	.word	0x200000b0
 8000ff4:	20000074 	.word	0x20000074

08000ff8 <HAL_TIM_PeriodElapsedCallback>:

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "global.h"
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim2 )
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

 timerRun();
 8001000:	f000 f964 	bl	80012cc <timerRun>
 getKeyInput();
 8001004:	f7ff fbde 	bl	80007c4 <getKeyInput>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001014:	f000 fbd2 	bl	80017bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001018:	f000 f816 	bl	8001048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101c:	f000 f89c 	bl	8001158 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001020:	f000 f84e 	bl	80010c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(& htim2);
 8001024:	4806      	ldr	r0, [pc, #24]	; (8001040 <main+0x30>)
 8001026:	f001 fb27 	bl	8002678 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <main+0x34>)
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]
  initializeArrays_for_Button();
 8001030:	f7ff fb60 	bl	80006f4 <initializeArrays_for_Button>
  while (1)
  {
	  fsm_automatic_run();
 8001034:	f7ff f88a 	bl	800014c <fsm_automatic_run>
	  fsm_manual_run();
 8001038:	f7ff f9b6 	bl	80003a8 <fsm_manual_run>
  {
 800103c:	e7fa      	b.n	8001034 <main+0x24>
 800103e:	bf00      	nop
 8001040:	20000100 	.word	0x20000100
 8001044:	2000003c 	.word	0x2000003c

08001048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b090      	sub	sp, #64	; 0x40
 800104c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104e:	f107 0318 	add.w	r3, r7, #24
 8001052:	2228      	movs	r2, #40	; 0x28
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f001 feca 	bl	8002df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800106a:	2302      	movs	r3, #2
 800106c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106e:	2301      	movs	r3, #1
 8001070:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001072:	2310      	movs	r3, #16
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001076:	2300      	movs	r3, #0
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107a:	f107 0318 	add.w	r3, r7, #24
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fece 	bl	8001e20 <HAL_RCC_OscConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800108a:	f000 f8c9 	bl	8001220 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108e:	230f      	movs	r3, #15
 8001090:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f001 f93a 	bl	8002320 <HAL_RCC_ClockConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010b2:	f000 f8b5 	bl	8001220 <Error_Handler>
  }
}
 80010b6:	bf00      	nop
 80010b8:	3740      	adds	r7, #64	; 0x40
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d4:	463b      	mov	r3, r7
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_TIM2_Init+0x94>)
 80010de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_TIM2_Init+0x94>)
 80010e6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_TIM2_Init+0x94>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <MX_TIM2_Init+0x94>)
 80010f4:	2209      	movs	r2, #9
 80010f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <MX_TIM2_Init+0x94>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <MX_TIM2_Init+0x94>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001104:	4813      	ldr	r0, [pc, #76]	; (8001154 <MX_TIM2_Init+0x94>)
 8001106:	f001 fa67 	bl	80025d8 <HAL_TIM_Base_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001110:	f000 f886 	bl	8001220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001118:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	4619      	mov	r1, r3
 8001120:	480c      	ldr	r0, [pc, #48]	; (8001154 <MX_TIM2_Init+0x94>)
 8001122:	f001 fbfd 	bl	8002920 <HAL_TIM_ConfigClockSource>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800112c:	f000 f878 	bl	8001220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001130:	2300      	movs	r3, #0
 8001132:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001138:	463b      	mov	r3, r7
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_TIM2_Init+0x94>)
 800113e:	f001 fdc9 	bl	8002cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001148:	f000 f86a 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000100 	.word	0x20000100

08001158 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116c:	4b29      	ldr	r3, [pc, #164]	; (8001214 <MX_GPIO_Init+0xbc>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a28      	ldr	r2, [pc, #160]	; (8001214 <MX_GPIO_Init+0xbc>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b26      	ldr	r3, [pc, #152]	; (8001214 <MX_GPIO_Init+0xbc>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001184:	4b23      	ldr	r3, [pc, #140]	; (8001214 <MX_GPIO_Init+0xbc>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a22      	ldr	r2, [pc, #136]	; (8001214 <MX_GPIO_Init+0xbc>)
 800118a:	f043 0308 	orr.w	r3, r3, #8
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b20      	ldr	r3, [pc, #128]	; (8001214 <MX_GPIO_Init+0xbc>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 800119c:	2200      	movs	r2, #0
 800119e:	f643 71fe 	movw	r1, #16382	; 0x3ffe
 80011a2:	481d      	ldr	r0, [pc, #116]	; (8001218 <MX_GPIO_Init+0xc0>)
 80011a4:	f000 fe0b 	bl	8001dbe <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|RED1_Pin
                          |RED2_Pin|GREEN1_Pin|GREEN2_Pin|YELLOW1_Pin
                          |YELLOW2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|SEG8_Pin
 80011a8:	2200      	movs	r2, #0
 80011aa:	f64f 611f 	movw	r1, #65055	; 0xfe1f
 80011ae:	481b      	ldr	r0, [pc, #108]	; (800121c <MX_GPIO_Init+0xc4>)
 80011b0:	f000 fe05 	bl	8001dbe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin RED1_Pin
                           RED2_Pin GREEN1_Pin GREEN2_Pin YELLOW1_Pin
                           YELLOW2_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 80011b4:	f643 73fe 	movw	r3, #16382	; 0x3ffe
 80011b8:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|RED1_Pin
                          |RED2_Pin|GREEN1_Pin|GREEN2_Pin|YELLOW1_Pin
                          |YELLOW2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2302      	movs	r3, #2
 80011c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4619      	mov	r1, r3
 80011cc:	4812      	ldr	r0, [pc, #72]	; (8001218 <MX_GPIO_Init+0xc0>)
 80011ce:	f000 fc65 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin SEG8_Pin
                           SEG9_Pin SEG10_Pin SEG11_Pin SEG12_Pin
                           SEG13_Pin EN3_Pin EN4_Pin SEG7_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|SEG8_Pin
 80011d2:	f64f 631f 	movw	r3, #65055	; 0xfe1f
 80011d6:	60bb      	str	r3, [r7, #8]
                          |SEG9_Pin|SEG10_Pin|SEG11_Pin|SEG12_Pin
                          |SEG13_Pin|EN3_Pin|EN4_Pin|SEG7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2302      	movs	r3, #2
 80011e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	4619      	mov	r1, r3
 80011ea:	480c      	ldr	r0, [pc, #48]	; (800121c <MX_GPIO_Init+0xc4>)
 80011ec:	f000 fc56 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 80011f0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80011f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_GPIO_Init+0xc4>)
 8001206:	f000 fc49 	bl	8001a9c <HAL_GPIO_Init>

}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000
 8001218:	40010800 	.word	0x40010800
 800121c:	40010c00 	.word	0x40010c00

08001220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001228:	e7fe      	b.n	8001228 <Error_Handler+0x8>
	...

0800122c <setTimer1>:
int counter5 = 0;
int timer5_flag = 0;
int counter4 = 0;
int timer4_flag = 0;

void setTimer1(int duration){
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	counter1 = duration;
 8001234:	4a05      	ldr	r2, [pc, #20]	; (800124c <setTimer1+0x20>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <setTimer1+0x24>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000044 	.word	0x20000044
 8001250:	20000040 	.word	0x20000040

08001254 <setTimer2>:
void setTimer2(int duration){
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	counter2 = duration;
 800125c:	4a05      	ldr	r2, [pc, #20]	; (8001274 <setTimer2+0x20>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <setTimer2+0x24>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	2000004c 	.word	0x2000004c
 8001278:	20000048 	.word	0x20000048

0800127c <setTimer3>:
void setTimer3(int duration){
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	counter3 = duration;
 8001284:	4a05      	ldr	r2, [pc, #20]	; (800129c <setTimer3+0x20>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <setTimer3+0x24>)
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000054 	.word	0x20000054
 80012a0:	20000050 	.word	0x20000050

080012a4 <setTimer4>:
}
void setTimer5( int duration ){
	counter5 = duration;
	timer5_flag = 0;
}
void setTimer4( int duration ){
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	counter4 = duration;
 80012ac:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <setTimer4+0x20>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <setTimer4+0x24>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000068 	.word	0x20000068
 80012c8:	2000006c 	.word	0x2000006c

080012cc <timerRun>:

void timerRun(){
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
	if(counter1 > 0){
 80012d0:	4b31      	ldr	r3, [pc, #196]	; (8001398 <timerRun+0xcc>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	dd0b      	ble.n	80012f0 <timerRun+0x24>
		counter1--;
 80012d8:	4b2f      	ldr	r3, [pc, #188]	; (8001398 <timerRun+0xcc>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	3b01      	subs	r3, #1
 80012de:	4a2e      	ldr	r2, [pc, #184]	; (8001398 <timerRun+0xcc>)
 80012e0:	6013      	str	r3, [r2, #0]
		if(counter1 <= 0){
 80012e2:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <timerRun+0xcc>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	dc02      	bgt.n	80012f0 <timerRun+0x24>
			timer1_flag = 1;
 80012ea:	4b2c      	ldr	r3, [pc, #176]	; (800139c <timerRun+0xd0>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	601a      	str	r2, [r3, #0]
              }
	}
	 if(counter2 > 0){
 80012f0:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <timerRun+0xd4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	dd0b      	ble.n	8001310 <timerRun+0x44>
			counter2 -- ;
 80012f8:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <timerRun+0xd4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	4a28      	ldr	r2, [pc, #160]	; (80013a0 <timerRun+0xd4>)
 8001300:	6013      	str	r3, [r2, #0]
				if(counter2 <= 0){
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <timerRun+0xd4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	dc02      	bgt.n	8001310 <timerRun+0x44>
					timer2_flag = 1;
 800130a:	4b26      	ldr	r3, [pc, #152]	; (80013a4 <timerRun+0xd8>)
 800130c:	2201      	movs	r2, #1
 800130e:	601a      	str	r2, [r3, #0]
				}
			}
		if(counter3 > 0){
 8001310:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <timerRun+0xdc>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	dd0b      	ble.n	8001330 <timerRun+0x64>
				counter3--;
 8001318:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <timerRun+0xdc>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	3b01      	subs	r3, #1
 800131e:	4a22      	ldr	r2, [pc, #136]	; (80013a8 <timerRun+0xdc>)
 8001320:	6013      	str	r3, [r2, #0]
				if(counter3 <= 0){
 8001322:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <timerRun+0xdc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	dc02      	bgt.n	8001330 <timerRun+0x64>
					timer3_flag = 1;
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <timerRun+0xe0>)
 800132c:	2201      	movs	r2, #1
 800132e:	601a      	str	r2, [r3, #0]
				}
			}
		if(counter0 > 0){
 8001330:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <timerRun+0xe4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	dd0b      	ble.n	8001350 <timerRun+0x84>
			counter0--;
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <timerRun+0xe4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3b01      	subs	r3, #1
 800133e:	4a1c      	ldr	r2, [pc, #112]	; (80013b0 <timerRun+0xe4>)
 8001340:	6013      	str	r3, [r2, #0]
			if (counter0 <= 0){
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <timerRun+0xe4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	dc02      	bgt.n	8001350 <timerRun+0x84>
				timer0_flag = 1 ;
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <timerRun+0xe8>)
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]
			}
		}
		if(counter4 > 0){
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <timerRun+0xec>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	dd0b      	ble.n	8001370 <timerRun+0xa4>
			counter4--;
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <timerRun+0xec>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3b01      	subs	r3, #1
 800135e:	4a16      	ldr	r2, [pc, #88]	; (80013b8 <timerRun+0xec>)
 8001360:	6013      	str	r3, [r2, #0]
			if (counter4 <= 0){
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <timerRun+0xec>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	dc02      	bgt.n	8001370 <timerRun+0xa4>
				timer4_flag = 1;
 800136a:	4b14      	ldr	r3, [pc, #80]	; (80013bc <timerRun+0xf0>)
 800136c:	2201      	movs	r2, #1
 800136e:	601a      	str	r2, [r3, #0]
			}
		}
		if(counter5 > 0){
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <timerRun+0xf4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	dd0b      	ble.n	8001390 <timerRun+0xc4>
			counter5--;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <timerRun+0xf4>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3b01      	subs	r3, #1
 800137e:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <timerRun+0xf4>)
 8001380:	6013      	str	r3, [r2, #0]
			if (counter5 <= 0){
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <timerRun+0xf4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	dc02      	bgt.n	8001390 <timerRun+0xc4>
				timer5_flag = 1;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <timerRun+0xf8>)
 800138c:	2201      	movs	r2, #1
 800138e:	601a      	str	r2, [r3, #0]
			}
		}

}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	20000044 	.word	0x20000044
 800139c:	20000040 	.word	0x20000040
 80013a0:	2000004c 	.word	0x2000004c
 80013a4:	20000048 	.word	0x20000048
 80013a8:	20000054 	.word	0x20000054
 80013ac:	20000050 	.word	0x20000050
 80013b0:	2000005c 	.word	0x2000005c
 80013b4:	20000058 	.word	0x20000058
 80013b8:	20000068 	.word	0x20000068
 80013bc:	2000006c 	.word	0x2000006c
 80013c0:	20000060 	.word	0x20000060
 80013c4:	20000064 	.word	0x20000064

080013c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_MspInit+0x5c>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	4a14      	ldr	r2, [pc, #80]	; (8001424 <HAL_MspInit+0x5c>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6193      	str	r3, [r2, #24]
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_MspInit+0x5c>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <HAL_MspInit+0x5c>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <HAL_MspInit+0x5c>)
 80013ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f0:	61d3      	str	r3, [r2, #28]
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_MspInit+0x5c>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_MspInit+0x60>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_MspInit+0x60>)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	40021000 	.word	0x40021000
 8001428:	40010000 	.word	0x40010000

0800142c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800143c:	d113      	bne.n	8001466 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <HAL_TIM_Base_MspInit+0x44>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <HAL_TIM_Base_MspInit+0x44>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	61d3      	str	r3, [r2, #28]
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_TIM_Base_MspInit+0x44>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	201c      	movs	r0, #28
 800145c:	f000 fae7 	bl	8001a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001460:	201c      	movs	r0, #28
 8001462:	f000 fb00 	bl	8001a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <NMI_Handler+0x4>

0800147a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <MemManage_Handler+0x4>

08001486 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler+0x4>

08001492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ba:	f000 f9c5 	bl	8001848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <TIM2_IRQHandler+0x10>)
 80014ca:	f001 f921 	bl	8002710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000100 	.word	0x20000100

080014d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <traffic_light>:
 */


#include "traffic_light.h"

void traffic_light(int status){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	2b07      	cmp	r3, #7
 80014f2:	f200 8135 	bhi.w	8001760 <traffic_light+0x27c>
 80014f6:	a201      	add	r2, pc, #4	; (adr r2, 80014fc <traffic_light+0x18>)
 80014f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fc:	0800151d 	.word	0x0800151d
 8001500:	08001567 	.word	0x08001567
 8001504:	080015b1 	.word	0x080015b1
 8001508:	080015fb 	.word	0x080015fb
 800150c:	08001645 	.word	0x08001645
 8001510:	0800168f 	.word	0x0800168f
 8001514:	080016d5 	.word	0x080016d5
 8001518:	0800171b 	.word	0x0800171b
	switch(status){

	case INIT:
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin,RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001522:	4892      	ldr	r0, [pc, #584]	; (800176c <traffic_light+0x288>)
 8001524:	f000 fc4b 	bl	8001dbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin,RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152e:	488f      	ldr	r0, [pc, #572]	; (800176c <traffic_light+0x288>)
 8001530:	f000 fc45 	bl	8001dbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin,RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800153a:	488c      	ldr	r0, [pc, #560]	; (800176c <traffic_light+0x288>)
 800153c:	f000 fc3f 	bl	8001dbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin,RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001546:	4889      	ldr	r0, [pc, #548]	; (800176c <traffic_light+0x288>)
 8001548:	f000 fc39 	bl	8001dbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin,RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001552:	4886      	ldr	r0, [pc, #536]	; (800176c <traffic_light+0x288>)
 8001554:	f000 fc33 	bl	8001dbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin,RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800155e:	4883      	ldr	r0, [pc, #524]	; (800176c <traffic_light+0x288>)
 8001560:	f000 fc2d 	bl	8001dbe <HAL_GPIO_WritePin>
	break;
 8001564:	e0fd      	b.n	8001762 <traffic_light+0x27e>

	case RED1_GREEN:
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin,SET);
 8001566:	2201      	movs	r2, #1
 8001568:	f44f 7180 	mov.w	r1, #256	; 0x100
 800156c:	487f      	ldr	r0, [pc, #508]	; (800176c <traffic_light+0x288>)
 800156e:	f000 fc26 	bl	8001dbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin,RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001578:	487c      	ldr	r0, [pc, #496]	; (800176c <traffic_light+0x288>)
 800157a:	f000 fc20 	bl	8001dbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin,RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001584:	4879      	ldr	r0, [pc, #484]	; (800176c <traffic_light+0x288>)
 8001586:	f000 fc1a 	bl	8001dbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin,RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001590:	4876      	ldr	r0, [pc, #472]	; (800176c <traffic_light+0x288>)
 8001592:	f000 fc14 	bl	8001dbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin,SET);
 8001596:	2201      	movs	r2, #1
 8001598:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800159c:	4873      	ldr	r0, [pc, #460]	; (800176c <traffic_light+0x288>)
 800159e:	f000 fc0e 	bl	8001dbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin,RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a8:	4870      	ldr	r0, [pc, #448]	; (800176c <traffic_light+0x288>)
 80015aa:	f000 fc08 	bl	8001dbe <HAL_GPIO_WritePin>
    break ;
 80015ae:	e0d8      	b.n	8001762 <traffic_light+0x27e>

	case RED1_YELLOW :
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin,SET);
 80015b0:	2201      	movs	r2, #1
 80015b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b6:	486d      	ldr	r0, [pc, #436]	; (800176c <traffic_light+0x288>)
 80015b8:	f000 fc01 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin,RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015c2:	486a      	ldr	r0, [pc, #424]	; (800176c <traffic_light+0x288>)
 80015c4:	f000 fbfb 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin,RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ce:	4867      	ldr	r0, [pc, #412]	; (800176c <traffic_light+0x288>)
 80015d0:	f000 fbf5 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin,RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015da:	4864      	ldr	r0, [pc, #400]	; (800176c <traffic_light+0x288>)
 80015dc:	f000 fbef 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin,RESET);
 80015e0:	2200      	movs	r2, #0
 80015e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015e6:	4861      	ldr	r0, [pc, #388]	; (800176c <traffic_light+0x288>)
 80015e8:	f000 fbe9 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin,SET);
 80015ec:	2201      	movs	r2, #1
 80015ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015f2:	485e      	ldr	r0, [pc, #376]	; (800176c <traffic_light+0x288>)
 80015f4:	f000 fbe3 	bl	8001dbe <HAL_GPIO_WritePin>
		break;
 80015f8:	e0b3      	b.n	8001762 <traffic_light+0x27e>

	case GREEN1_RED :
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin,RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001600:	485a      	ldr	r0, [pc, #360]	; (800176c <traffic_light+0x288>)
 8001602:	f000 fbdc 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin,SET);
 8001606:	2201      	movs	r2, #1
 8001608:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800160c:	4857      	ldr	r0, [pc, #348]	; (800176c <traffic_light+0x288>)
 800160e:	f000 fbd6 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin,RESET);
 8001612:	2200      	movs	r2, #0
 8001614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001618:	4854      	ldr	r0, [pc, #336]	; (800176c <traffic_light+0x288>)
 800161a:	f000 fbd0 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin,SET);
 800161e:	2201      	movs	r2, #1
 8001620:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001624:	4851      	ldr	r0, [pc, #324]	; (800176c <traffic_light+0x288>)
 8001626:	f000 fbca 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin,RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001630:	484e      	ldr	r0, [pc, #312]	; (800176c <traffic_light+0x288>)
 8001632:	f000 fbc4 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin,RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800163c:	484b      	ldr	r0, [pc, #300]	; (800176c <traffic_light+0x288>)
 800163e:	f000 fbbe 	bl	8001dbe <HAL_GPIO_WritePin>
		break;
 8001642:	e08e      	b.n	8001762 <traffic_light+0x27e>

	case YELLOW1_RED :
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin,RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	f44f 7180 	mov.w	r1, #256	; 0x100
 800164a:	4848      	ldr	r0, [pc, #288]	; (800176c <traffic_light+0x288>)
 800164c:	f000 fbb7 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin,RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001656:	4845      	ldr	r0, [pc, #276]	; (800176c <traffic_light+0x288>)
 8001658:	f000 fbb1 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin,SET);
 800165c:	2201      	movs	r2, #1
 800165e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001662:	4842      	ldr	r0, [pc, #264]	; (800176c <traffic_light+0x288>)
 8001664:	f000 fbab 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin,SET);
 8001668:	2201      	movs	r2, #1
 800166a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800166e:	483f      	ldr	r0, [pc, #252]	; (800176c <traffic_light+0x288>)
 8001670:	f000 fba5 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin,RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800167a:	483c      	ldr	r0, [pc, #240]	; (800176c <traffic_light+0x288>)
 800167c:	f000 fb9f 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin,RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001686:	4839      	ldr	r0, [pc, #228]	; (800176c <traffic_light+0x288>)
 8001688:	f000 fb99 	bl	8001dbe <HAL_GPIO_WritePin>
		break;
 800168c:	e069      	b.n	8001762 <traffic_light+0x27e>
	case RED:
		HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 800168e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001692:	4836      	ldr	r0, [pc, #216]	; (800176c <traffic_light+0x288>)
 8001694:	f000 fbab 	bl	8001dee <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin,RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800169e:	4833      	ldr	r0, [pc, #204]	; (800176c <traffic_light+0x288>)
 80016a0:	f000 fb8d 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin,RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016aa:	4830      	ldr	r0, [pc, #192]	; (800176c <traffic_light+0x288>)
 80016ac:	f000 fb87 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 80016b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b4:	482d      	ldr	r0, [pc, #180]	; (800176c <traffic_light+0x288>)
 80016b6:	f000 fb9a 	bl	8001dee <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin,RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016c0:	482a      	ldr	r0, [pc, #168]	; (800176c <traffic_light+0x288>)
 80016c2:	f000 fb7c 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin,RESET);
 80016c6:	2200      	movs	r2, #0
 80016c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016cc:	4827      	ldr	r0, [pc, #156]	; (800176c <traffic_light+0x288>)
 80016ce:	f000 fb76 	bl	8001dbe <HAL_GPIO_WritePin>
		break;
 80016d2:	e046      	b.n	8001762 <traffic_light+0x27e>
	case GREEN:
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin,RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016da:	4824      	ldr	r0, [pc, #144]	; (800176c <traffic_light+0x288>)
 80016dc:	f000 fb6f 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 80016e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016e4:	4821      	ldr	r0, [pc, #132]	; (800176c <traffic_light+0x288>)
 80016e6:	f000 fb82 	bl	8001dee <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin,RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016f0:	481e      	ldr	r0, [pc, #120]	; (800176c <traffic_light+0x288>)
 80016f2:	f000 fb64 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin,RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016fc:	481b      	ldr	r0, [pc, #108]	; (800176c <traffic_light+0x288>)
 80016fe:	f000 fb5e 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 8001702:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001706:	4819      	ldr	r0, [pc, #100]	; (800176c <traffic_light+0x288>)
 8001708:	f000 fb71 	bl	8001dee <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin,RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001712:	4816      	ldr	r0, [pc, #88]	; (800176c <traffic_light+0x288>)
 8001714:	f000 fb53 	bl	8001dbe <HAL_GPIO_WritePin>
		break;
 8001718:	e023      	b.n	8001762 <traffic_light+0x27e>
	case YELLOW:
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin,RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001720:	4812      	ldr	r0, [pc, #72]	; (800176c <traffic_light+0x288>)
 8001722:	f000 fb4c 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin,RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800172c:	480f      	ldr	r0, [pc, #60]	; (800176c <traffic_light+0x288>)
 800172e:	f000 fb46 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 8001732:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001736:	480d      	ldr	r0, [pc, #52]	; (800176c <traffic_light+0x288>)
 8001738:	f000 fb59 	bl	8001dee <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin,RESET);
 800173c:	2200      	movs	r2, #0
 800173e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001742:	480a      	ldr	r0, [pc, #40]	; (800176c <traffic_light+0x288>)
 8001744:	f000 fb3b 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin,RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800174e:	4807      	ldr	r0, [pc, #28]	; (800176c <traffic_light+0x288>)
 8001750:	f000 fb35 	bl	8001dbe <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 8001754:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <traffic_light+0x288>)
 800175a:	f000 fb48 	bl	8001dee <HAL_GPIO_TogglePin>
		break;
 800175e:	e000      	b.n	8001762 <traffic_light+0x27e>
    default:
	break;
 8001760:	bf00      	nop
	}
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40010800 	.word	0x40010800

08001770 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001770:	f7ff feb2 	bl	80014d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001774:	480b      	ldr	r0, [pc, #44]	; (80017a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001776:	490c      	ldr	r1, [pc, #48]	; (80017a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001778:	4a0c      	ldr	r2, [pc, #48]	; (80017ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800177c:	e002      	b.n	8001784 <LoopCopyDataInit>

0800177e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001782:	3304      	adds	r3, #4

08001784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001788:	d3f9      	bcc.n	800177e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178a:	4a09      	ldr	r2, [pc, #36]	; (80017b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800178c:	4c09      	ldr	r4, [pc, #36]	; (80017b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001790:	e001      	b.n	8001796 <LoopFillZerobss>

08001792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001794:	3204      	adds	r2, #4

08001796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001798:	d3fb      	bcc.n	8001792 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800179a:	f001 fb05 	bl	8002da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800179e:	f7ff fc37 	bl	8001010 <main>
  bx lr
 80017a2:	4770      	bx	lr
  ldr r0, =_sdata
 80017a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80017ac:	08002e44 	.word	0x08002e44
  ldr r2, =_sbss
 80017b0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80017b4:	2000014c 	.word	0x2000014c

080017b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017b8:	e7fe      	b.n	80017b8 <ADC1_2_IRQHandler>
	...

080017bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <HAL_Init+0x28>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a07      	ldr	r2, [pc, #28]	; (80017e4 <HAL_Init+0x28>)
 80017c6:	f043 0310 	orr.w	r3, r3, #16
 80017ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017cc:	2003      	movs	r0, #3
 80017ce:	f000 f923 	bl	8001a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017d2:	200f      	movs	r0, #15
 80017d4:	f000 f808 	bl	80017e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d8:	f7ff fdf6 	bl	80013c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40022000 	.word	0x40022000

080017e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_InitTick+0x54>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_InitTick+0x58>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	4619      	mov	r1, r3
 80017fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001802:	fbb2 f3f3 	udiv	r3, r2, r3
 8001806:	4618      	mov	r0, r3
 8001808:	f000 f93b 	bl	8001a82 <HAL_SYSTICK_Config>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e00e      	b.n	8001834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b0f      	cmp	r3, #15
 800181a:	d80a      	bhi.n	8001832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800181c:	2200      	movs	r2, #0
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	f000 f903 	bl	8001a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001828:	4a06      	ldr	r2, [pc, #24]	; (8001844 <HAL_InitTick+0x5c>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	e000      	b.n	8001834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000014 	.word	0x20000014
 8001840:	2000001c 	.word	0x2000001c
 8001844:	20000018 	.word	0x20000018

08001848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_IncTick+0x1c>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <HAL_IncTick+0x20>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4413      	add	r3, r2
 8001858:	4a03      	ldr	r2, [pc, #12]	; (8001868 <HAL_IncTick+0x20>)
 800185a:	6013      	str	r3, [r2, #0]
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	2000001c 	.word	0x2000001c
 8001868:	20000148 	.word	0x20000148

0800186c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return uwTick;
 8001870:	4b02      	ldr	r3, [pc, #8]	; (800187c <HAL_GetTick+0x10>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	20000148 	.word	0x20000148

08001880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800189c:	4013      	ands	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b2:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60d3      	str	r3, [r2, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	f003 0307 	and.w	r3, r3, #7
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0b      	blt.n	800190e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	4906      	ldr	r1, [pc, #24]	; (8001918 <__NVIC_EnableIRQ+0x34>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	2001      	movs	r0, #1
 8001906:	fa00 f202 	lsl.w	r2, r0, r2
 800190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	e000e100 	.word	0xe000e100

0800191c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	6039      	str	r1, [r7, #0]
 8001926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192c:	2b00      	cmp	r3, #0
 800192e:	db0a      	blt.n	8001946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	b2da      	uxtb	r2, r3
 8001934:	490c      	ldr	r1, [pc, #48]	; (8001968 <__NVIC_SetPriority+0x4c>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	0112      	lsls	r2, r2, #4
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	440b      	add	r3, r1
 8001940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001944:	e00a      	b.n	800195c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4908      	ldr	r1, [pc, #32]	; (800196c <__NVIC_SetPriority+0x50>)
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	3b04      	subs	r3, #4
 8001954:	0112      	lsls	r2, r2, #4
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	440b      	add	r3, r1
 800195a:	761a      	strb	r2, [r3, #24]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000e100 	.word	0xe000e100
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001970:	b480      	push	{r7}
 8001972:	b089      	sub	sp, #36	; 0x24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f1c3 0307 	rsb	r3, r3, #7
 800198a:	2b04      	cmp	r3, #4
 800198c:	bf28      	it	cs
 800198e:	2304      	movcs	r3, #4
 8001990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3304      	adds	r3, #4
 8001996:	2b06      	cmp	r3, #6
 8001998:	d902      	bls.n	80019a0 <NVIC_EncodePriority+0x30>
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3b03      	subs	r3, #3
 800199e:	e000      	b.n	80019a2 <NVIC_EncodePriority+0x32>
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	f04f 32ff 	mov.w	r2, #4294967295
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43da      	mvns	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	401a      	ands	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b8:	f04f 31ff 	mov.w	r1, #4294967295
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa01 f303 	lsl.w	r3, r1, r3
 80019c2:	43d9      	mvns	r1, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	4313      	orrs	r3, r2
         );
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3724      	adds	r7, #36	; 0x24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e4:	d301      	bcc.n	80019ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00f      	b.n	8001a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <SysTick_Config+0x40>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f2:	210f      	movs	r1, #15
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	f7ff ff90 	bl	800191c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <SysTick_Config+0x40>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a02:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <SysTick_Config+0x40>)
 8001a04:	2207      	movs	r2, #7
 8001a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	e000e010 	.word	0xe000e010

08001a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff2d 	bl	8001880 <__NVIC_SetPriorityGrouping>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b086      	sub	sp, #24
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
 8001a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a40:	f7ff ff42 	bl	80018c8 <__NVIC_GetPriorityGrouping>
 8001a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	6978      	ldr	r0, [r7, #20]
 8001a4c:	f7ff ff90 	bl	8001970 <NVIC_EncodePriority>
 8001a50:	4602      	mov	r2, r0
 8001a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff5f 	bl	800191c <__NVIC_SetPriority>
}
 8001a5e:	bf00      	nop
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff35 	bl	80018e4 <__NVIC_EnableIRQ>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ffa2 	bl	80019d4 <SysTick_Config>
 8001a90:	4603      	mov	r3, r0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b08b      	sub	sp, #44	; 0x2c
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aae:	e148      	b.n	8001d42 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	f040 8137 	bne.w	8001d3c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4aa3      	ldr	r2, [pc, #652]	; (8001d60 <HAL_GPIO_Init+0x2c4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d05e      	beq.n	8001b96 <HAL_GPIO_Init+0xfa>
 8001ad8:	4aa1      	ldr	r2, [pc, #644]	; (8001d60 <HAL_GPIO_Init+0x2c4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d875      	bhi.n	8001bca <HAL_GPIO_Init+0x12e>
 8001ade:	4aa1      	ldr	r2, [pc, #644]	; (8001d64 <HAL_GPIO_Init+0x2c8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d058      	beq.n	8001b96 <HAL_GPIO_Init+0xfa>
 8001ae4:	4a9f      	ldr	r2, [pc, #636]	; (8001d64 <HAL_GPIO_Init+0x2c8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d86f      	bhi.n	8001bca <HAL_GPIO_Init+0x12e>
 8001aea:	4a9f      	ldr	r2, [pc, #636]	; (8001d68 <HAL_GPIO_Init+0x2cc>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d052      	beq.n	8001b96 <HAL_GPIO_Init+0xfa>
 8001af0:	4a9d      	ldr	r2, [pc, #628]	; (8001d68 <HAL_GPIO_Init+0x2cc>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d869      	bhi.n	8001bca <HAL_GPIO_Init+0x12e>
 8001af6:	4a9d      	ldr	r2, [pc, #628]	; (8001d6c <HAL_GPIO_Init+0x2d0>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d04c      	beq.n	8001b96 <HAL_GPIO_Init+0xfa>
 8001afc:	4a9b      	ldr	r2, [pc, #620]	; (8001d6c <HAL_GPIO_Init+0x2d0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d863      	bhi.n	8001bca <HAL_GPIO_Init+0x12e>
 8001b02:	4a9b      	ldr	r2, [pc, #620]	; (8001d70 <HAL_GPIO_Init+0x2d4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d046      	beq.n	8001b96 <HAL_GPIO_Init+0xfa>
 8001b08:	4a99      	ldr	r2, [pc, #612]	; (8001d70 <HAL_GPIO_Init+0x2d4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d85d      	bhi.n	8001bca <HAL_GPIO_Init+0x12e>
 8001b0e:	2b12      	cmp	r3, #18
 8001b10:	d82a      	bhi.n	8001b68 <HAL_GPIO_Init+0xcc>
 8001b12:	2b12      	cmp	r3, #18
 8001b14:	d859      	bhi.n	8001bca <HAL_GPIO_Init+0x12e>
 8001b16:	a201      	add	r2, pc, #4	; (adr r2, 8001b1c <HAL_GPIO_Init+0x80>)
 8001b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1c:	08001b97 	.word	0x08001b97
 8001b20:	08001b71 	.word	0x08001b71
 8001b24:	08001b83 	.word	0x08001b83
 8001b28:	08001bc5 	.word	0x08001bc5
 8001b2c:	08001bcb 	.word	0x08001bcb
 8001b30:	08001bcb 	.word	0x08001bcb
 8001b34:	08001bcb 	.word	0x08001bcb
 8001b38:	08001bcb 	.word	0x08001bcb
 8001b3c:	08001bcb 	.word	0x08001bcb
 8001b40:	08001bcb 	.word	0x08001bcb
 8001b44:	08001bcb 	.word	0x08001bcb
 8001b48:	08001bcb 	.word	0x08001bcb
 8001b4c:	08001bcb 	.word	0x08001bcb
 8001b50:	08001bcb 	.word	0x08001bcb
 8001b54:	08001bcb 	.word	0x08001bcb
 8001b58:	08001bcb 	.word	0x08001bcb
 8001b5c:	08001bcb 	.word	0x08001bcb
 8001b60:	08001b79 	.word	0x08001b79
 8001b64:	08001b8d 	.word	0x08001b8d
 8001b68:	4a82      	ldr	r2, [pc, #520]	; (8001d74 <HAL_GPIO_Init+0x2d8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d013      	beq.n	8001b96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b6e:	e02c      	b.n	8001bca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	623b      	str	r3, [r7, #32]
          break;
 8001b76:	e029      	b.n	8001bcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	623b      	str	r3, [r7, #32]
          break;
 8001b80:	e024      	b.n	8001bcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	3308      	adds	r3, #8
 8001b88:	623b      	str	r3, [r7, #32]
          break;
 8001b8a:	e01f      	b.n	8001bcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	330c      	adds	r3, #12
 8001b92:	623b      	str	r3, [r7, #32]
          break;
 8001b94:	e01a      	b.n	8001bcc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d102      	bne.n	8001ba4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	623b      	str	r3, [r7, #32]
          break;
 8001ba2:	e013      	b.n	8001bcc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d105      	bne.n	8001bb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bac:	2308      	movs	r3, #8
 8001bae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69fa      	ldr	r2, [r7, #28]
 8001bb4:	611a      	str	r2, [r3, #16]
          break;
 8001bb6:	e009      	b.n	8001bcc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bb8:	2308      	movs	r3, #8
 8001bba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69fa      	ldr	r2, [r7, #28]
 8001bc0:	615a      	str	r2, [r3, #20]
          break;
 8001bc2:	e003      	b.n	8001bcc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	623b      	str	r3, [r7, #32]
          break;
 8001bc8:	e000      	b.n	8001bcc <HAL_GPIO_Init+0x130>
          break;
 8001bca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	2bff      	cmp	r3, #255	; 0xff
 8001bd0:	d801      	bhi.n	8001bd6 <HAL_GPIO_Init+0x13a>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	e001      	b.n	8001bda <HAL_GPIO_Init+0x13e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	2bff      	cmp	r3, #255	; 0xff
 8001be0:	d802      	bhi.n	8001be8 <HAL_GPIO_Init+0x14c>
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	e002      	b.n	8001bee <HAL_GPIO_Init+0x152>
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	3b08      	subs	r3, #8
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	210f      	movs	r1, #15
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	401a      	ands	r2, r3
 8001c00:	6a39      	ldr	r1, [r7, #32]
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	fa01 f303 	lsl.w	r3, r1, r3
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8090 	beq.w	8001d3c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c1c:	4b56      	ldr	r3, [pc, #344]	; (8001d78 <HAL_GPIO_Init+0x2dc>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	4a55      	ldr	r2, [pc, #340]	; (8001d78 <HAL_GPIO_Init+0x2dc>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6193      	str	r3, [r2, #24]
 8001c28:	4b53      	ldr	r3, [pc, #332]	; (8001d78 <HAL_GPIO_Init+0x2dc>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c34:	4a51      	ldr	r2, [pc, #324]	; (8001d7c <HAL_GPIO_Init+0x2e0>)
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	089b      	lsrs	r3, r3, #2
 8001c3a:	3302      	adds	r3, #2
 8001c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	220f      	movs	r2, #15
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	4013      	ands	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a49      	ldr	r2, [pc, #292]	; (8001d80 <HAL_GPIO_Init+0x2e4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d00d      	beq.n	8001c7c <HAL_GPIO_Init+0x1e0>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a48      	ldr	r2, [pc, #288]	; (8001d84 <HAL_GPIO_Init+0x2e8>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d007      	beq.n	8001c78 <HAL_GPIO_Init+0x1dc>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a47      	ldr	r2, [pc, #284]	; (8001d88 <HAL_GPIO_Init+0x2ec>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d101      	bne.n	8001c74 <HAL_GPIO_Init+0x1d8>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e004      	b.n	8001c7e <HAL_GPIO_Init+0x1e2>
 8001c74:	2303      	movs	r3, #3
 8001c76:	e002      	b.n	8001c7e <HAL_GPIO_Init+0x1e2>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <HAL_GPIO_Init+0x1e2>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c80:	f002 0203 	and.w	r2, r2, #3
 8001c84:	0092      	lsls	r2, r2, #2
 8001c86:	4093      	lsls	r3, r2
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c8e:	493b      	ldr	r1, [pc, #236]	; (8001d7c <HAL_GPIO_Init+0x2e0>)
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	089b      	lsrs	r3, r3, #2
 8001c94:	3302      	adds	r3, #2
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d006      	beq.n	8001cb6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ca8:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	4937      	ldr	r1, [pc, #220]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	608b      	str	r3, [r1, #8]
 8001cb4:	e006      	b.n	8001cc4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cb6:	4b35      	ldr	r3, [pc, #212]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	4933      	ldr	r1, [pc, #204]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d006      	beq.n	8001cde <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cd0:	4b2e      	ldr	r3, [pc, #184]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	492d      	ldr	r1, [pc, #180]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	60cb      	str	r3, [r1, #12]
 8001cdc:	e006      	b.n	8001cec <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cde:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	4929      	ldr	r1, [pc, #164]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d006      	beq.n	8001d06 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cf8:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	4923      	ldr	r1, [pc, #140]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
 8001d04:	e006      	b.n	8001d14 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d06:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	491f      	ldr	r1, [pc, #124]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d006      	beq.n	8001d2e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d20:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4919      	ldr	r1, [pc, #100]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	600b      	str	r3, [r1, #0]
 8001d2c:	e006      	b.n	8001d3c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d2e:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	4915      	ldr	r1, [pc, #84]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	3301      	adds	r3, #1
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f47f aeaf 	bne.w	8001ab0 <HAL_GPIO_Init+0x14>
  }
}
 8001d52:	bf00      	nop
 8001d54:	bf00      	nop
 8001d56:	372c      	adds	r7, #44	; 0x2c
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	10320000 	.word	0x10320000
 8001d64:	10310000 	.word	0x10310000
 8001d68:	10220000 	.word	0x10220000
 8001d6c:	10210000 	.word	0x10210000
 8001d70:	10120000 	.word	0x10120000
 8001d74:	10110000 	.word	0x10110000
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	40010800 	.word	0x40010800
 8001d84:	40010c00 	.word	0x40010c00
 8001d88:	40011000 	.word	0x40011000
 8001d8c:	40010400 	.word	0x40010400

08001d90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	e001      	b.n	8001db2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr

08001dbe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	807b      	strh	r3, [r7, #2]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dce:	787b      	ldrb	r3, [r7, #1]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd4:	887a      	ldrh	r2, [r7, #2]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dda:	e003      	b.n	8001de4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ddc:	887b      	ldrh	r3, [r7, #2]
 8001dde:	041a      	lsls	r2, r3, #16
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	611a      	str	r2, [r3, #16]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e00:	887a      	ldrh	r2, [r7, #2]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4013      	ands	r3, r2
 8001e06:	041a      	lsls	r2, r3, #16
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	887b      	ldrh	r3, [r7, #2]
 8001e0e:	400b      	ands	r3, r1
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	611a      	str	r2, [r3, #16]
}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e26c      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8087 	beq.w	8001f4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e40:	4b92      	ldr	r3, [pc, #584]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d00c      	beq.n	8001e66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e4c:	4b8f      	ldr	r3, [pc, #572]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d112      	bne.n	8001e7e <HAL_RCC_OscConfig+0x5e>
 8001e58:	4b8c      	ldr	r3, [pc, #560]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e64:	d10b      	bne.n	8001e7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e66:	4b89      	ldr	r3, [pc, #548]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d06c      	beq.n	8001f4c <HAL_RCC_OscConfig+0x12c>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d168      	bne.n	8001f4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e246      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e86:	d106      	bne.n	8001e96 <HAL_RCC_OscConfig+0x76>
 8001e88:	4b80      	ldr	r3, [pc, #512]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a7f      	ldr	r2, [pc, #508]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	e02e      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd4>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x98>
 8001e9e:	4b7b      	ldr	r3, [pc, #492]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a7a      	ldr	r2, [pc, #488]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4b78      	ldr	r3, [pc, #480]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a77      	ldr	r2, [pc, #476]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e01d      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd4>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0xbc>
 8001ec2:	4b72      	ldr	r3, [pc, #456]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a71      	ldr	r2, [pc, #452]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b6f      	ldr	r3, [pc, #444]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a6e      	ldr	r2, [pc, #440]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e00b      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd4>
 8001edc:	4b6b      	ldr	r3, [pc, #428]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a6a      	ldr	r2, [pc, #424]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	4b68      	ldr	r3, [pc, #416]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a67      	ldr	r2, [pc, #412]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d013      	beq.n	8001f24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff fcb6 	bl	800186c <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f04:	f7ff fcb2 	bl	800186c <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e1fa      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f16:	4b5d      	ldr	r3, [pc, #372]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0xe4>
 8001f22:	e014      	b.n	8001f4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7ff fca2 	bl	800186c <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f2c:	f7ff fc9e 	bl	800186c <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	; 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e1e6      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3e:	4b53      	ldr	r3, [pc, #332]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x10c>
 8001f4a:	e000      	b.n	8001f4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d063      	beq.n	8002022 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f5a:	4b4c      	ldr	r3, [pc, #304]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00b      	beq.n	8001f7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f66:	4b49      	ldr	r3, [pc, #292]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d11c      	bne.n	8001fac <HAL_RCC_OscConfig+0x18c>
 8001f72:	4b46      	ldr	r3, [pc, #280]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d116      	bne.n	8001fac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7e:	4b43      	ldr	r3, [pc, #268]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d005      	beq.n	8001f96 <HAL_RCC_OscConfig+0x176>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d001      	beq.n	8001f96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e1ba      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f96:	4b3d      	ldr	r3, [pc, #244]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4939      	ldr	r1, [pc, #228]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001faa:	e03a      	b.n	8002022 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d020      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb4:	4b36      	ldr	r3, [pc, #216]	; (8002090 <HAL_RCC_OscConfig+0x270>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7ff fc57 	bl	800186c <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc2:	f7ff fc53 	bl	800186c <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e19b      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd4:	4b2d      	ldr	r3, [pc, #180]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe0:	4b2a      	ldr	r3, [pc, #168]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4927      	ldr	r1, [pc, #156]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	600b      	str	r3, [r1, #0]
 8001ff4:	e015      	b.n	8002022 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff6:	4b26      	ldr	r3, [pc, #152]	; (8002090 <HAL_RCC_OscConfig+0x270>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7ff fc36 	bl	800186c <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002004:	f7ff fc32 	bl	800186c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e17a      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002016:	4b1d      	ldr	r3, [pc, #116]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d03a      	beq.n	80020a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d019      	beq.n	800206a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002036:	4b17      	ldr	r3, [pc, #92]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8002038:	2201      	movs	r2, #1
 800203a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203c:	f7ff fc16 	bl	800186c <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002044:	f7ff fc12 	bl	800186c <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e15a      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002062:	2001      	movs	r0, #1
 8002064:	f000 fa9a 	bl	800259c <RCC_Delay>
 8002068:	e01c      	b.n	80020a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002070:	f7ff fbfc 	bl	800186c <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002076:	e00f      	b.n	8002098 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002078:	f7ff fbf8 	bl	800186c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d908      	bls.n	8002098 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e140      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000
 8002090:	42420000 	.word	0x42420000
 8002094:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002098:	4b9e      	ldr	r3, [pc, #632]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1e9      	bne.n	8002078 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80a6 	beq.w	80021fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b6:	4b97      	ldr	r3, [pc, #604]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10d      	bne.n	80020de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c2:	4b94      	ldr	r3, [pc, #592]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	4a93      	ldr	r2, [pc, #588]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 80020c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020cc:	61d3      	str	r3, [r2, #28]
 80020ce:	4b91      	ldr	r3, [pc, #580]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020da:	2301      	movs	r3, #1
 80020dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020de:	4b8e      	ldr	r3, [pc, #568]	; (8002318 <HAL_RCC_OscConfig+0x4f8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d118      	bne.n	800211c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ea:	4b8b      	ldr	r3, [pc, #556]	; (8002318 <HAL_RCC_OscConfig+0x4f8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a8a      	ldr	r2, [pc, #552]	; (8002318 <HAL_RCC_OscConfig+0x4f8>)
 80020f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f6:	f7ff fbb9 	bl	800186c <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fe:	f7ff fbb5 	bl	800186c <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b64      	cmp	r3, #100	; 0x64
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e0fd      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002110:	4b81      	ldr	r3, [pc, #516]	; (8002318 <HAL_RCC_OscConfig+0x4f8>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d106      	bne.n	8002132 <HAL_RCC_OscConfig+0x312>
 8002124:	4b7b      	ldr	r3, [pc, #492]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	4a7a      	ldr	r2, [pc, #488]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6213      	str	r3, [r2, #32]
 8002130:	e02d      	b.n	800218e <HAL_RCC_OscConfig+0x36e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0x334>
 800213a:	4b76      	ldr	r3, [pc, #472]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	4a75      	ldr	r2, [pc, #468]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	6213      	str	r3, [r2, #32]
 8002146:	4b73      	ldr	r3, [pc, #460]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4a72      	ldr	r2, [pc, #456]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 800214c:	f023 0304 	bic.w	r3, r3, #4
 8002150:	6213      	str	r3, [r2, #32]
 8002152:	e01c      	b.n	800218e <HAL_RCC_OscConfig+0x36e>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b05      	cmp	r3, #5
 800215a:	d10c      	bne.n	8002176 <HAL_RCC_OscConfig+0x356>
 800215c:	4b6d      	ldr	r3, [pc, #436]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4a6c      	ldr	r2, [pc, #432]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	6213      	str	r3, [r2, #32]
 8002168:	4b6a      	ldr	r3, [pc, #424]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4a69      	ldr	r2, [pc, #420]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6213      	str	r3, [r2, #32]
 8002174:	e00b      	b.n	800218e <HAL_RCC_OscConfig+0x36e>
 8002176:	4b67      	ldr	r3, [pc, #412]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4a66      	ldr	r2, [pc, #408]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 800217c:	f023 0301 	bic.w	r3, r3, #1
 8002180:	6213      	str	r3, [r2, #32]
 8002182:	4b64      	ldr	r3, [pc, #400]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	4a63      	ldr	r2, [pc, #396]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 8002188:	f023 0304 	bic.w	r3, r3, #4
 800218c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d015      	beq.n	80021c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002196:	f7ff fb69 	bl	800186c <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219c:	e00a      	b.n	80021b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f7ff fb65 	bl	800186c <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e0ab      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b4:	4b57      	ldr	r3, [pc, #348]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0ee      	beq.n	800219e <HAL_RCC_OscConfig+0x37e>
 80021c0:	e014      	b.n	80021ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c2:	f7ff fb53 	bl	800186c <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7ff fb4f 	bl	800186c <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e095      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e0:	4b4c      	ldr	r3, [pc, #304]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1ee      	bne.n	80021ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d105      	bne.n	80021fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f2:	4b48      	ldr	r3, [pc, #288]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	4a47      	ldr	r2, [pc, #284]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 80021f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 8081 	beq.w	800230a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002208:	4b42      	ldr	r3, [pc, #264]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b08      	cmp	r3, #8
 8002212:	d061      	beq.n	80022d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d146      	bne.n	80022aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221c:	4b3f      	ldr	r3, [pc, #252]	; (800231c <HAL_RCC_OscConfig+0x4fc>)
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7ff fb23 	bl	800186c <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222a:	f7ff fb1f 	bl	800186c <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e067      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223c:	4b35      	ldr	r3, [pc, #212]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f0      	bne.n	800222a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002250:	d108      	bne.n	8002264 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002252:	4b30      	ldr	r3, [pc, #192]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	492d      	ldr	r1, [pc, #180]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002264:	4b2b      	ldr	r3, [pc, #172]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a19      	ldr	r1, [r3, #32]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	430b      	orrs	r3, r1
 8002276:	4927      	ldr	r1, [pc, #156]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800227c:	4b27      	ldr	r3, [pc, #156]	; (800231c <HAL_RCC_OscConfig+0x4fc>)
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7ff faf3 	bl	800186c <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228a:	f7ff faef 	bl	800186c <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e037      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800229c:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x46a>
 80022a8:	e02f      	b.n	800230a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022aa:	4b1c      	ldr	r3, [pc, #112]	; (800231c <HAL_RCC_OscConfig+0x4fc>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7ff fadc 	bl	800186c <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b8:	f7ff fad8 	bl	800186c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e020      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ca:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x498>
 80022d6:	e018      	b.n	800230a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e013      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCC_OscConfig+0x4f4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d106      	bne.n	8002306 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	429a      	cmp	r2, r3
 8002304:	d001      	beq.n	800230a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	40007000 	.word	0x40007000
 800231c:	42420060 	.word	0x42420060

08002320 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0d0      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002334:	4b6a      	ldr	r3, [pc, #424]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d910      	bls.n	8002364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002342:	4b67      	ldr	r3, [pc, #412]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 0207 	bic.w	r2, r3, #7
 800234a:	4965      	ldr	r1, [pc, #404]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002352:	4b63      	ldr	r3, [pc, #396]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0b8      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d020      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800237c:	4b59      	ldr	r3, [pc, #356]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	4a58      	ldr	r2, [pc, #352]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002386:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002394:	4b53      	ldr	r3, [pc, #332]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4a52      	ldr	r2, [pc, #328]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800239e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a0:	4b50      	ldr	r3, [pc, #320]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	494d      	ldr	r1, [pc, #308]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d040      	beq.n	8002440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d107      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c6:	4b47      	ldr	r3, [pc, #284]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d115      	bne.n	80023fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e07f      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023de:	4b41      	ldr	r3, [pc, #260]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d109      	bne.n	80023fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e073      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e06b      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023fe:	4b39      	ldr	r3, [pc, #228]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f023 0203 	bic.w	r2, r3, #3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4936      	ldr	r1, [pc, #216]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	4313      	orrs	r3, r2
 800240e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002410:	f7ff fa2c 	bl	800186c <HAL_GetTick>
 8002414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002416:	e00a      	b.n	800242e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002418:	f7ff fa28 	bl	800186c <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	; 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e053      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 020c 	and.w	r2, r3, #12
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	429a      	cmp	r2, r3
 800243e:	d1eb      	bne.n	8002418 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002440:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d210      	bcs.n	8002470 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 0207 	bic.w	r2, r3, #7
 8002456:	4922      	ldr	r1, [pc, #136]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e032      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800247c:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4916      	ldr	r1, [pc, #88]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	4313      	orrs	r3, r2
 800248c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	490e      	ldr	r1, [pc, #56]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ae:	f000 f821 	bl	80024f4 <HAL_RCC_GetSysClockFreq>
 80024b2:	4602      	mov	r2, r0
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	490a      	ldr	r1, [pc, #40]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024c0:	5ccb      	ldrb	r3, [r1, r3]
 80024c2:	fa22 f303 	lsr.w	r3, r2, r3
 80024c6:	4a09      	ldr	r2, [pc, #36]	; (80024ec <HAL_RCC_ClockConfig+0x1cc>)
 80024c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <HAL_RCC_ClockConfig+0x1d0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff f98a 	bl	80017e8 <HAL_InitTick>

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40022000 	.word	0x40022000
 80024e4:	40021000 	.word	0x40021000
 80024e8:	08002e18 	.word	0x08002e18
 80024ec:	20000014 	.word	0x20000014
 80024f0:	20000018 	.word	0x20000018

080024f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800250e:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <HAL_RCC_GetSysClockFreq+0x94>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b04      	cmp	r3, #4
 800251c:	d002      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x30>
 800251e:	2b08      	cmp	r3, #8
 8002520:	d003      	beq.n	800252a <HAL_RCC_GetSysClockFreq+0x36>
 8002522:	e027      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <HAL_RCC_GetSysClockFreq+0x98>)
 8002526:	613b      	str	r3, [r7, #16]
      break;
 8002528:	e027      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	0c9b      	lsrs	r3, r3, #18
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	4a17      	ldr	r2, [pc, #92]	; (8002590 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002534:	5cd3      	ldrb	r3, [r2, r3]
 8002536:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d010      	beq.n	8002564 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002542:	4b11      	ldr	r3, [pc, #68]	; (8002588 <HAL_RCC_GetSysClockFreq+0x94>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	0c5b      	lsrs	r3, r3, #17
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	4a11      	ldr	r2, [pc, #68]	; (8002594 <HAL_RCC_GetSysClockFreq+0xa0>)
 800254e:	5cd3      	ldrb	r3, [r2, r3]
 8002550:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a0d      	ldr	r2, [pc, #52]	; (800258c <HAL_RCC_GetSysClockFreq+0x98>)
 8002556:	fb02 f203 	mul.w	r2, r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	e004      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a0c      	ldr	r2, [pc, #48]	; (8002598 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002568:	fb02 f303 	mul.w	r3, r2, r3
 800256c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	613b      	str	r3, [r7, #16]
      break;
 8002572:	e002      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_RCC_GetSysClockFreq+0x98>)
 8002576:	613b      	str	r3, [r7, #16]
      break;
 8002578:	bf00      	nop
    }
  }
  return sysclockfreq;
 800257a:	693b      	ldr	r3, [r7, #16]
}
 800257c:	4618      	mov	r0, r3
 800257e:	371c      	adds	r7, #28
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
 800258c:	007a1200 	.word	0x007a1200
 8002590:	08002e28 	.word	0x08002e28
 8002594:	08002e38 	.word	0x08002e38
 8002598:	003d0900 	.word	0x003d0900

0800259c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025a4:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <RCC_Delay+0x34>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <RCC_Delay+0x38>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	0a5b      	lsrs	r3, r3, #9
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	fb02 f303 	mul.w	r3, r2, r3
 80025b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025b8:	bf00      	nop
  }
  while (Delay --);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1e5a      	subs	r2, r3, #1
 80025be:	60fa      	str	r2, [r7, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f9      	bne.n	80025b8 <RCC_Delay+0x1c>
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	20000014 	.word	0x20000014
 80025d4:	10624dd3 	.word	0x10624dd3

080025d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e041      	b.n	800266e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d106      	bne.n	8002604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7fe ff14 	bl	800142c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3304      	adds	r3, #4
 8002614:	4619      	mov	r1, r3
 8002616:	4610      	mov	r0, r2
 8002618:	f000 fa6e 	bl	8002af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b01      	cmp	r3, #1
 800268a:	d001      	beq.n	8002690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e035      	b.n	80026fc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a16      	ldr	r2, [pc, #88]	; (8002708 <HAL_TIM_Base_Start_IT+0x90>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d009      	beq.n	80026c6 <HAL_TIM_Base_Start_IT+0x4e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ba:	d004      	beq.n	80026c6 <HAL_TIM_Base_Start_IT+0x4e>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a12      	ldr	r2, [pc, #72]	; (800270c <HAL_TIM_Base_Start_IT+0x94>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d111      	bne.n	80026ea <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b06      	cmp	r3, #6
 80026d6:	d010      	beq.n	80026fa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e8:	e007      	b.n	80026fa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0201 	orr.w	r2, r2, #1
 80026f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40012c00 	.word	0x40012c00
 800270c:	40000400 	.word	0x40000400

08002710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b02      	cmp	r3, #2
 8002724:	d122      	bne.n	800276c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b02      	cmp	r3, #2
 8002732:	d11b      	bne.n	800276c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f06f 0202 	mvn.w	r2, #2
 800273c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f9b4 	bl	8002ac0 <HAL_TIM_IC_CaptureCallback>
 8002758:	e005      	b.n	8002766 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f9a7 	bl	8002aae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f9b6 	bl	8002ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b04      	cmp	r3, #4
 8002778:	d122      	bne.n	80027c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b04      	cmp	r3, #4
 8002786:	d11b      	bne.n	80027c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0204 	mvn.w	r2, #4
 8002790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2202      	movs	r2, #2
 8002796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f98a 	bl	8002ac0 <HAL_TIM_IC_CaptureCallback>
 80027ac:	e005      	b.n	80027ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f97d 	bl	8002aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f98c 	bl	8002ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d122      	bne.n	8002814 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d11b      	bne.n	8002814 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0208 	mvn.w	r2, #8
 80027e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2204      	movs	r2, #4
 80027ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f960 	bl	8002ac0 <HAL_TIM_IC_CaptureCallback>
 8002800:	e005      	b.n	800280e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f953 	bl	8002aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f962 	bl	8002ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b10      	cmp	r3, #16
 8002820:	d122      	bne.n	8002868 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	2b10      	cmp	r3, #16
 800282e:	d11b      	bne.n	8002868 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0210 	mvn.w	r2, #16
 8002838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2208      	movs	r2, #8
 800283e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f936 	bl	8002ac0 <HAL_TIM_IC_CaptureCallback>
 8002854:	e005      	b.n	8002862 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f929 	bl	8002aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f938 	bl	8002ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b01      	cmp	r3, #1
 8002874:	d10e      	bne.n	8002894 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b01      	cmp	r3, #1
 8002882:	d107      	bne.n	8002894 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0201 	mvn.w	r2, #1
 800288c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fe fbb2 	bl	8000ff8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289e:	2b80      	cmp	r3, #128	; 0x80
 80028a0:	d10e      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	2b80      	cmp	r3, #128	; 0x80
 80028ae:	d107      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fa6b 	bl	8002d96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ca:	2b40      	cmp	r3, #64	; 0x40
 80028cc:	d10e      	bne.n	80028ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d8:	2b40      	cmp	r3, #64	; 0x40
 80028da:	d107      	bne.n	80028ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f8fc 	bl	8002ae4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b20      	cmp	r3, #32
 80028f8:	d10e      	bne.n	8002918 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f003 0320 	and.w	r3, r3, #32
 8002904:	2b20      	cmp	r3, #32
 8002906:	d107      	bne.n	8002918 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0220 	mvn.w	r2, #32
 8002910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fa36 	bl	8002d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_TIM_ConfigClockSource+0x1c>
 8002938:	2302      	movs	r3, #2
 800293a:	e0b4      	b.n	8002aa6 <HAL_TIM_ConfigClockSource+0x186>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800295a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002974:	d03e      	beq.n	80029f4 <HAL_TIM_ConfigClockSource+0xd4>
 8002976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800297a:	f200 8087 	bhi.w	8002a8c <HAL_TIM_ConfigClockSource+0x16c>
 800297e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002982:	f000 8086 	beq.w	8002a92 <HAL_TIM_ConfigClockSource+0x172>
 8002986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800298a:	d87f      	bhi.n	8002a8c <HAL_TIM_ConfigClockSource+0x16c>
 800298c:	2b70      	cmp	r3, #112	; 0x70
 800298e:	d01a      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0xa6>
 8002990:	2b70      	cmp	r3, #112	; 0x70
 8002992:	d87b      	bhi.n	8002a8c <HAL_TIM_ConfigClockSource+0x16c>
 8002994:	2b60      	cmp	r3, #96	; 0x60
 8002996:	d050      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0x11a>
 8002998:	2b60      	cmp	r3, #96	; 0x60
 800299a:	d877      	bhi.n	8002a8c <HAL_TIM_ConfigClockSource+0x16c>
 800299c:	2b50      	cmp	r3, #80	; 0x50
 800299e:	d03c      	beq.n	8002a1a <HAL_TIM_ConfigClockSource+0xfa>
 80029a0:	2b50      	cmp	r3, #80	; 0x50
 80029a2:	d873      	bhi.n	8002a8c <HAL_TIM_ConfigClockSource+0x16c>
 80029a4:	2b40      	cmp	r3, #64	; 0x40
 80029a6:	d058      	beq.n	8002a5a <HAL_TIM_ConfigClockSource+0x13a>
 80029a8:	2b40      	cmp	r3, #64	; 0x40
 80029aa:	d86f      	bhi.n	8002a8c <HAL_TIM_ConfigClockSource+0x16c>
 80029ac:	2b30      	cmp	r3, #48	; 0x30
 80029ae:	d064      	beq.n	8002a7a <HAL_TIM_ConfigClockSource+0x15a>
 80029b0:	2b30      	cmp	r3, #48	; 0x30
 80029b2:	d86b      	bhi.n	8002a8c <HAL_TIM_ConfigClockSource+0x16c>
 80029b4:	2b20      	cmp	r3, #32
 80029b6:	d060      	beq.n	8002a7a <HAL_TIM_ConfigClockSource+0x15a>
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	d867      	bhi.n	8002a8c <HAL_TIM_ConfigClockSource+0x16c>
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d05c      	beq.n	8002a7a <HAL_TIM_ConfigClockSource+0x15a>
 80029c0:	2b10      	cmp	r3, #16
 80029c2:	d05a      	beq.n	8002a7a <HAL_TIM_ConfigClockSource+0x15a>
 80029c4:	e062      	b.n	8002a8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6899      	ldr	r1, [r3, #8]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f000 f95e 	bl	8002c96 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	609a      	str	r2, [r3, #8]
      break;
 80029f2:	e04f      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	6899      	ldr	r1, [r3, #8]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f000 f947 	bl	8002c96 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a16:	609a      	str	r2, [r3, #8]
      break;
 8002a18:	e03c      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	6859      	ldr	r1, [r3, #4]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	461a      	mov	r2, r3
 8002a28:	f000 f8be 	bl	8002ba8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2150      	movs	r1, #80	; 0x50
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 f915 	bl	8002c62 <TIM_ITRx_SetConfig>
      break;
 8002a38:	e02c      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	6859      	ldr	r1, [r3, #4]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	461a      	mov	r2, r3
 8002a48:	f000 f8dc 	bl	8002c04 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2160      	movs	r1, #96	; 0x60
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 f905 	bl	8002c62 <TIM_ITRx_SetConfig>
      break;
 8002a58:	e01c      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	6859      	ldr	r1, [r3, #4]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	461a      	mov	r2, r3
 8002a68:	f000 f89e 	bl	8002ba8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2140      	movs	r1, #64	; 0x40
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 f8f5 	bl	8002c62 <TIM_ITRx_SetConfig>
      break;
 8002a78:	e00c      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4619      	mov	r1, r3
 8002a84:	4610      	mov	r0, r2
 8002a86:	f000 f8ec 	bl	8002c62 <TIM_ITRx_SetConfig>
      break;
 8002a8a:	e003      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a90:	e000      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr
	...

08002af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a25      	ldr	r2, [pc, #148]	; (8002ba0 <TIM_Base_SetConfig+0xa8>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d007      	beq.n	8002b20 <TIM_Base_SetConfig+0x28>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b16:	d003      	beq.n	8002b20 <TIM_Base_SetConfig+0x28>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a22      	ldr	r2, [pc, #136]	; (8002ba4 <TIM_Base_SetConfig+0xac>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d108      	bne.n	8002b32 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a1a      	ldr	r2, [pc, #104]	; (8002ba0 <TIM_Base_SetConfig+0xa8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d007      	beq.n	8002b4a <TIM_Base_SetConfig+0x52>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b40:	d003      	beq.n	8002b4a <TIM_Base_SetConfig+0x52>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <TIM_Base_SetConfig+0xac>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d108      	bne.n	8002b5c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a07      	ldr	r2, [pc, #28]	; (8002ba0 <TIM_Base_SetConfig+0xa8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d103      	bne.n	8002b90 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	691a      	ldr	r2, [r3, #16]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	615a      	str	r2, [r3, #20]
}
 8002b96:	bf00      	nop
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	40012c00 	.word	0x40012c00
 8002ba4:	40000400 	.word	0x40000400

08002ba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f023 0201 	bic.w	r2, r3, #1
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f023 030a 	bic.w	r3, r3, #10
 8002be4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	621a      	str	r2, [r3, #32]
}
 8002bfa:	bf00      	nop
 8002bfc:	371c      	adds	r7, #28
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr

08002c04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	f023 0210 	bic.w	r2, r3, #16
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	031b      	lsls	r3, r3, #12
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c40:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	621a      	str	r2, [r3, #32]
}
 8002c58:	bf00      	nop
 8002c5a:	371c      	adds	r7, #28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b085      	sub	sp, #20
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f043 0307 	orr.w	r3, r3, #7
 8002c84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	609a      	str	r2, [r3, #8]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr

08002c96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b087      	sub	sp, #28
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	607a      	str	r2, [r7, #4]
 8002ca2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cb0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	021a      	lsls	r2, r3, #8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	609a      	str	r2, [r3, #8]
}
 8002cca:	bf00      	nop
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e041      	b.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a14      	ldr	r2, [pc, #80]	; (8002d7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d009      	beq.n	8002d44 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d38:	d004      	beq.n	8002d44 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a10      	ldr	r2, [pc, #64]	; (8002d80 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d10c      	bne.n	8002d5e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40012c00 	.word	0x40012c00
 8002d80:	40000400 	.word	0x40000400

08002d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr

08002d96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <__libc_init_array>:
 8002da8:	b570      	push	{r4, r5, r6, lr}
 8002daa:	2600      	movs	r6, #0
 8002dac:	4d0c      	ldr	r5, [pc, #48]	; (8002de0 <__libc_init_array+0x38>)
 8002dae:	4c0d      	ldr	r4, [pc, #52]	; (8002de4 <__libc_init_array+0x3c>)
 8002db0:	1b64      	subs	r4, r4, r5
 8002db2:	10a4      	asrs	r4, r4, #2
 8002db4:	42a6      	cmp	r6, r4
 8002db6:	d109      	bne.n	8002dcc <__libc_init_array+0x24>
 8002db8:	f000 f822 	bl	8002e00 <_init>
 8002dbc:	2600      	movs	r6, #0
 8002dbe:	4d0a      	ldr	r5, [pc, #40]	; (8002de8 <__libc_init_array+0x40>)
 8002dc0:	4c0a      	ldr	r4, [pc, #40]	; (8002dec <__libc_init_array+0x44>)
 8002dc2:	1b64      	subs	r4, r4, r5
 8002dc4:	10a4      	asrs	r4, r4, #2
 8002dc6:	42a6      	cmp	r6, r4
 8002dc8:	d105      	bne.n	8002dd6 <__libc_init_array+0x2e>
 8002dca:	bd70      	pop	{r4, r5, r6, pc}
 8002dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dd0:	4798      	blx	r3
 8002dd2:	3601      	adds	r6, #1
 8002dd4:	e7ee      	b.n	8002db4 <__libc_init_array+0xc>
 8002dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dda:	4798      	blx	r3
 8002ddc:	3601      	adds	r6, #1
 8002dde:	e7f2      	b.n	8002dc6 <__libc_init_array+0x1e>
 8002de0:	08002e3c 	.word	0x08002e3c
 8002de4:	08002e3c 	.word	0x08002e3c
 8002de8:	08002e3c 	.word	0x08002e3c
 8002dec:	08002e40 	.word	0x08002e40

08002df0 <memset>:
 8002df0:	4603      	mov	r3, r0
 8002df2:	4402      	add	r2, r0
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d100      	bne.n	8002dfa <memset+0xa>
 8002df8:	4770      	bx	lr
 8002dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8002dfe:	e7f9      	b.n	8002df4 <memset+0x4>

08002e00 <_init>:
 8002e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e02:	bf00      	nop
 8002e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e06:	bc08      	pop	{r3}
 8002e08:	469e      	mov	lr, r3
 8002e0a:	4770      	bx	lr

08002e0c <_fini>:
 8002e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0e:	bf00      	nop
 8002e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e12:	bc08      	pop	{r3}
 8002e14:	469e      	mov	lr, r3
 8002e16:	4770      	bx	lr
